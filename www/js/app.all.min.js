(function() {
  'use strict';

  angular.module('app', ['ionic', 'ngCordova', 'ngResource', 'ngTemplates', 'ngStorage', 'ngFileUpload', 'ngGeolocation'])

  .run(['$ionicPlatform', '$rootScope', '$state', '$window', '$ionicHistory', 'Message', 'rootScopeService', 'appStorage', 'devMode',
    function($ionicPlatform, $rootScope, $state, $window, $ionicHistory, Message, rootScopeService, appStorage, devMode) {

      angular.extend($rootScope, rootScopeService);
      $ionicPlatform.ready(onIonicPlatformReady);
      if (devMode) {
        setInitialState();
      }
      //====================================================
      //  Implementation
      //====================================================
      function onIonicPlatformReady() {
        if ($window.cordova && $window.cordova.plugins.Keyboard) {
          $window.cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        }
        if ($window.StatusBar) {
          $window.StatusBar.styleDefault();
        }
        $ionicPlatform.registerBackButtonAction(function(e) {
          e.preventDefault();
          if ($rootScope.areStates([
            'main.productList.market',
            'main.productList.pawnShop',
            'main.walkThrough',
            'main.login'
          ])) {
            return ionic.Platform.exitApp();
          }
          $ionicHistory.goBack();
        }, 101);
        setInitialState();
      }
      //====================================================
      //  Helper
      //====================================================
      function setInitialState() {
        // Set default current location
        appStorage.address = '전체보기';
        if (!appStorage.geoJSON) {
          appStorage.geoJSON = {
            type: 'Point',
            coordinates: [127.02800027507125, 37.498085435791786] // default 강남역.
          };
          appStorage.marketDistance = 30000;
          appStorage.pawnShopDistance = 30000;
        }
        if ($rootScope.appStorage.firstTime && $state.get('main.walkThrough')) {
          $state.go('main.walkThrough');
        } else if (!$rootScope.appStorage.token) {
          $state.go('main.login');
        } else {
          $state.go('main.productList.pawnShop', {
            // $state.go('main.announcementList', {
            category: 'pawnShop',
            status: 'responded',
            product: '',
            to: '',
            method: 'create',
            id: '',
            step: 2
          });
        }
      }
    }
  ])

  .config(['$stateProvider', '$httpProvider',
    function($stateProvider, $httpProvider) {

      // $ionicConfigProvider.scrolling.jsScrolling(false);
      // //Security handler
      $httpProvider.interceptors.push('AuthInterceptor');

      // //Allow session
      // $httpProvider.defaults.withCredentials = true;

      $stateProvider

      .state('main', {
        url: '/main',
        templateUrl: 'state/00main/main.html',
        controller: 'MainController as Main'
      })

      .state('main.walkThrough', {
        url: '/walkThrough',
        views: {
          main: {
            templateUrl: 'state/01walkThrough/walkThrough.html',
            controller: 'WalkThroughController as WalkThrough'
          }
        }
      })

      .state('main.login', {
        url: '/login',
        views: {
          main: {
            templateUrl: 'state/02login/login.html',
            controller: 'LoginController as Login'
          }
        }
      })

      .state('main.signUp', {
        params: {
          category: ''
        },
        url: '/signUp',
        views: {
          main: {
            templateUrl: 'state/02signUp/signUp.html',
            controller: 'SignUpController as SignUp'
          }
        }
      })

      .state('main.resetPassword', {
        params: {
          category: ''
        },
        url: '/resetPassword',
        views: {
          main: {
            templateUrl: 'state/02resetPassword/resetPassword.html',
            controller: 'ResetPasswordController as ResetPassword'
          }
        }
      })

      .state('main.profile', {
        params: {
          category: '',
          id: ''
        },
        url: '/profile',
        views: {
          main: {
            templateUrl: 'state/03profile/profile.html',
            controller: 'ProfileController as Profile'
          }
        }
      })

      .state('main.customer', {
        url: '/customer',
        views: {
          main: {
            templateUrl: 'state/04customer/customer.html',
            controller: 'CustomerController as Customer'
          }
        }
      })

      .state('main.term', {
        url: '/term',
        views: {
          main: {
            templateUrl: 'state/04term/term.html',
            controller: 'TermDetailController as TermDetail'
          }
        }
      })

      .state('main.home', {
        url: '/home',
        views: {
          main: {
            templateUrl: 'state/09home/home.html',
            controller: 'HomeController as Home'
          }
        }
      })

      .state('main.bidListUser', {
        params: {
          category: 'user',
          product: ''
        },
        url: '/bidListUser',
        views: {
          main: {
            templateUrl: 'state/10bidList/user/bidListUser.html',
            controller: 'BidListUserController as BidListUser'
          }
        }
      })

      .state('main.bidDetailUser', {
        params: {
          id: ''
        },
        url: '/bidDetailUser',
        views: {
          main: {
            templateUrl: 'state/10bidDetail/user/bidDetailUser.html',
            controller: 'BidDetailUserController as BidDetailUser'
          }
        }
      })


      .state('main.bidListPawnShopPending', {
        params: {
          category: 'pawnShop',
          status: 'pending'
        },
        url: '/bidListPawnShopPending',
        views: {
          main: {
            templateUrl: 'state/10bidList/pawnShop/pending/bidListPawnShopPending.html',
            controller: 'BidListPawnShopPendingController as BidListPawnShopPending'
          }
        }
      })

      .state('main.bidDetailPawnShopPending', {
        params: {
          id: ''
        },
        url: '/bidDetailPawnShopPending',
        views: {
          main: {
            templateUrl: 'state/10bidDetail/pawnShop/pending/bidDetailPawnShopPending.html',
            controller: 'BidDetailPawnShopPendingController as BidDetailPawnShopPending'
          }
        }
      })

      .state('main.bidListPawnShopResponded', {
        params: {
          category: 'pawnShop',
          status: 'responded'
        },
        url: '/bidListPawnShopResponded',
        views: {
          main: {
            templateUrl: 'state/10bidList/pawnShop/responded/bidListPawnShopResponded.html',
            controller: 'BidListPawnShopRespondedController as BidListPawnShopResponded'
          }
        }
      })

      .state('main.bidDetailPawnShopResponded', {
        params: {
          id: ''
        },
        url: '/bidDetailPawnShopResponded',
        views: {
          main: {
            templateUrl: 'state/10bidDetail/pawnShop/responded/bidDetailPawnShopResponded.html',
            controller: 'BidDetailPawnShopRespondedController as BidDetailPawnShopResponded'
          }
        }
      })

      // .state('main.bidRespond', {
      //   params: {
      //     id: ''
      //   },
      //   url: '/bidRespond',
      //   views: {
      //     main: {
      //       templateUrl: 'state/10bidRespond/bidRespond.html',
      //       controller: 'BidRespondController as BidRespond'
      //     }
      //   }
      // })

      .state('main.favoriteProductList', {
        url: '/favoriteProductList',
        views: {
          main: {
            templateUrl: 'state/10favoriteProductList/favoriteProductList.html',
            controller: 'FavoriteProductListController as FavoriteProductList'
          }
        }
      })

      .state('main.favoriteProductDetail', {
        url: '/favoriteProductDetail',
        views: {
          main: {
            templateUrl: 'state/10favoriteProductDetail/favoriteProductDetail.html',
            controller: 'FavoriteProductDetailController as FavoriteProductDetail'
          }
        }
      })

      .state('main.myProductListUser', {
        params: {
          category: 'user'
        },
        url: '/myProductListUser',
        views: {
          main: {
            templateUrl: 'state/10myProductList/user/myProductListUser.html',
            controller: 'MyProductListUserController as MyProductListUser'
          }
        }
      })

      .state('main.myProductListPawnShop', {
        params: {
          category: 'pawnShop'
        },
        url: '/myProductListPawnShop',
        views: {
          main: {
            templateUrl: 'state/10myProductList/pawnShop/myProductListPawnShop.html',
            controller: 'MyProductListPawnShopController as MyProductListPawnShop'
          }
        }
      })

      .state('main.productList', {
        abstract: true,
        url: '/productList',
        views: {
          main: {
            templateUrl: 'state/10productList/productList.html',
            controller: 'ProductListController as ProductList'
          }
        }
      })
        .state('main.productList.market', {
          params: {
            category: '', // pawnShop, market
            id: ''
          },
          url: '/market',
          views: {
            productList: {
              templateUrl: 'state/10productList/market/market.html',
              controller: 'ProductListController as ProductList'
            }
          }
        })
        .state('main.productList.pawnShop', {
          params: {
            category: '', // market,pawnShop
            id: ''
          },
          url: '/pawnShop',
          views: {
            productList: {
              templateUrl: 'state/10productList/pawnShop/pawnShop.html',
              controller: 'ProductListController as ProductList'
            }
          }
        })
        .state('main.placeId', {
          params: {
            category: '', // market,pawnShop
            id: ''
          },
          url: '/placeId',
          views: {
            main: {
              templateUrl: 'state/10productList/placeId/placeId.html',
              controller: 'ProductListController as ProductList'
            }
          }
        })



      .state('main.productRegister', {
        abstract: true,
        url: '/productRegister',
        views: {
          main: {
            templateUrl: 'state/10productRegister/productRegister.html',
            controller: 'ProductRegisterController as ProductRegister'
          }
        }
      })
        .state('main.productRegister.step1', {
          params: {
            category: '',
            step: '',
            id: '',
            method: ''
          },
          url: '/step1',
          views: {
            productRegister: {
              templateUrl: 'state/10productRegister/content/step1.html',
              controller: 'ProductRegisterController as ProductRegister'
            }
          }
        })
        .state('main.productRegister.step2', {
          params: {
            category: '',
            step: '',
            id: '',
            method: ''
          },
          url: '/step2',
          views: {
            productRegister: {
              templateUrl: 'state/10productRegister/content/step2.html',
              controller: 'ProductRegisterController as ProductRegister'
            }
          }
        })







      .state('main.productUpdate', {
        abstract: true,
        url: '/productUpdate',
        views: {
          main: {
            templateUrl: 'state/10productUpdate/productUpdate.html',
            controller: 'ProductUpdateController as ProductUpdate'
          }
        }
      })
        .state('main.productUpdate.info', {
          params: {
            category: '',
            step: '',
            section: 'info',
            id: '',
            method: ''
          },
          url: '/info',
          views: {
            productUpdate: {
              templateUrl: 'state/10productUpdate/info/productUpdateInfo.html',
              controller: 'ProductUpdateInfoController as ProductUpdateInfo'
            }
          }
        })
        .state('main.productUpdate.photo', {
          params: {
            category: '',
            step: '',
            section: 'photo',
            id: '',
            method: ''
          },
          url: '/photo',
          views: {
            productUpdate: {
              templateUrl: 'state/10productUpdate/photo/productUpdatePhoto.html',
              controller: 'ProductUpdatePhotoController as ProductUpdatePhoto'
            }
          }
        })








      .state('main.productDetail', {
        abstract: true,
        url: '/productDetail',
        views: {
          main: {
            templateUrl: 'state/10productDetail/productDetail.html',
            controller: 'ProductDetailController as ProductDetail'
          }
        }
      })
        .state('main.productDetail.market', {
          params: {
            category: '',
            id: ''
          },
          url: '/market',
          views: {
            productDetail: {
              templateUrl: 'state/10productDetail/market/market.html',
              controller: 'ProductDetailController as ProductDetail'
            }
          }
        })
        .state('main.productDetail.pawnShop', {
          params: {
            category: '',
            id: ''
          },
          url: '/pawnShop',
          views: {
            productDetail: {
              templateUrl: 'state/10productDetail/pawnShop/pawnShop.html',
              controller: 'ProductDetailController as ProductDetail'
            }
          }
        })

      .state('main.postList', {
        params: {
          category: ''
        },
        url: '/postList',
        views: {
          main: {
            templateUrl: 'state/11postList/postList.html',
            controller: 'PostListController as PostList'
          }
        }
      })

      .state('main.postDetail', {
        params: {
          id: ''
        },
        url: '/postDetail',
        views: {
          main: {
            templateUrl: 'state/11postDetail/postDetail.html',
            controller: 'PostDetailController as PostDetail'
          }
        }
      })

      .state('main.announcementList', {
        params: {
          category: ''
        },
        url: '/announcementList',
        views: {
          main: {
            templateUrl: 'state/12announcementList/announcementList.html',
            controller: 'AnnouncementListController as AnnouncementList'
          }
        }
      })

      .state('main.announcementDetail', {
        params: {
          category: '',
          id: ''
        },
        url: '/announcementDetail',
        views: {
          main: {
            templateUrl: 'state/12announcementDetail/announcementDetail.html',
            controller: 'AnnouncementDetailController as AnnouncementDetail'
          }
        }
      })

      .state('main.faqList', {
        params: {
          category: ''
        },
        url: '/faqList',
        views: {
          main: {
            templateUrl: 'state/12faqList/faqList.html',
            controller: 'FaqListController as FaqList'
          }
        }
      })

      .state('main.faqDetail', {
        params: {
          category: '',
          id: ''
        },
        url: '/faqDetail',
        views: {
          main: {
            templateUrl: 'state/12faqDetail/faqDetail.html',
            controller: 'FaqDetailController as FaqDetail'
          }
        }
      })

      .state('main.placeList', {
        params: {
          category: ''
        },
        url: '/placeList',
        views: {
          main: {
            templateUrl: 'state/19placeList/placeList.html',
            controller: 'PlaceListController as PlaceList'
          }
        }
      })

      .state('main.placeDetail', {
        params: {
          id: ''
        },
        url: '/placeDetail',
        views: {
          main: {
            templateUrl: 'state/19placeDetail/placeDetail.html',
            controller: 'PlaceDetailController as PlaceDetail'
          }
        }
      })

      .state('main.daumMap', {
        params: {
          prev: '',
          id: ''
        },
        url: '/daumMap',
        views: {
          main: {
            templateUrl: 'state/20daumMap/daumMap.html',
            controller: 'DaumMapController as DaumMap'
          }
        }
      });
    } //END
  ]);

})();

(function() {
  'use strict';

  angular.module('app')
  // .constant("governorUrl", "http://52.192.13.221")
  .constant("governorUrl", "http://192.168.0.65:1337")
    .constant("appName", "ohShop")
    .constant("appId", 7)
    .constant("googlePushSenderID", "350504486209")
    .constant("kakaoKey", "bdb254de02ea0b7521635ba469608674")
    .constant("facebookKey", "801820753200919")
    .constant("devMode", false);
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Bids', Bids);

  Bids.$inject = ['$resource', 'governorUrl'];

  function Bids($resource, governorUrl) {

    var bidUrl = governorUrl + '/bid' +
      '/:findOne' +
      '/:find' +
      '/:create' +
      '/:update' +
      '/:destroy' +
      '/:findOrCreate' +
      '/:count';

    var params = {
      findOne: '@findOne',
      find: '@find',
      create: '@create',
      update: '@update',
      destroy: '@destroy',
      findOrCreate: '@findOrCreate',
      count: '@count'
    };

    var actions = {
      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },
      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },
      create: {
        method: 'POST',
        params: {
          create: 'create'
        }
      },
      update: {
        method: 'PUT',
        params: {
          update: 'update'
        }
      },
      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      },
      findOrCreate: {
        method: 'POST',
        params: {
          findOrCreate: 'findOrCreate'
        }
      },
      count: {
        method: 'GET',
        params: {
          count: 'count'
        }
      },
    };

    var service = $resource(bidUrl, params, actions);

    return service;
  }

})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Bookings', Bookings);

    Bookings.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer'];

    function Bookings($resource, governorUrl, $cordovaFileTransfer) {

        var bookingUrl = governorUrl + '/booking' + '/:list' +
            '/:image' + '/:mine' + '/:dateBetween' + '/:request';

        var params = {
            list: '@list',
            image: '@image',
            mine: '@mine',
            dateBetween: '@dateBetween'
        };

        var actions = {
            getBookings: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },
            getMyBookings: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },
            getBookingsDateBetween: {
                method: 'GET',
                params: {
                    dateBetween: 'dateBetween'
                }
            },

            findById: {
                method: 'GET'
            },

            createBooking: {
                method: 'POST'
            },

            requestBooking: {
                method: 'POST',
                params: {
                    request: 'request'
                }
            },
            updateBooking: {
                method: 'PUT',
                isArray: true,
                headers: {
                    'Content-Type': 'text/plain'
                }
            },
            removeBooking: {
                method: 'DELETE'
            }
        };

        var service = $resource(bookingUrl, params, actions);

        //------------------------
        //  CUSTOM NON-HTTP METHODS
        //------------------------
        service.createBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };
        };

        service.updateBookingWithImage = function(parameters, booking) {
            angular.extend(booking, parameters);
            var filePath = booking.file;
            delete booking.file;
            var options = {
                params: booking,
                chunkedMode: false,
                httpMethod: 'PUT'
            };
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/booking/image', filePath, options)
            };

        };

        return service;
    }

    // Booking.get({
    //     list: 'list',
    //     category: 'SHOW-POST'
    // }).$promise
    //     .then(function success() {}, function err() {})

    // Bookings.createBookingWithImage({}, bookingWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})

    // require id in bookingWithFile sails' req.param('id') not only look at url params but
    //also looks at the body of req, it is a sails spcific feature.
    // Bookings.createBookingWithImage({}, bookingWithFile).$promise
    //     .then(function success() {}, function error() {}, function progress(progress) {})

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Comments', Comments);

  Comments.$inject = ['$resource', 'governorUrl'];

  function Comments($resource, governorUrl) {

    var commentUrl = governorUrl + '/:post' + '/:comment' + '/:reply';

    var params = {
      post: '@post',
      comment: '@comment',
      reply: '@reply'
    };

    var actions = {
      addCommentToPost: {
        method: 'POST',
        params: {
          post: 'post',
          comment: 'comment'
        }
      },
      reply: {
        method: 'POST',
        params: {
          comment: 'comment',
          reply: 'reply'
        }
      },
      find: {
        method: 'GET',
        params: {
          comment: 'comment'
        },
        isArray: true
      }
    };

    var service = $resource(commentUrl, params, actions);

    return service;
  }

})();

// TODO: remove pushservice and implement own device/push logic
(function() {
    'use strict';

    angular.module('app')
        .factory('Contacts', Contacts);

    Contacts.$inject = ['$resource', 'governorUrl'];

    function Contacts($resource, governorUrl) {

        var deviceUrl = governorUrl + '/:contact' + '/:admin';

        var params = {
            'contact': '@contact',
            'admin': '@admin'
        };

        var actions = {
            contactAdmin: {
                method: 'POST',
                params: {
                    contact: 'contact',
                    admin: 'admin'
                }
            }
        };

        var service = $resource(deviceUrl, params, actions);

        return service;
    }
})();

// TODO: remove pushservice and implement own device/push logic
(function() {
    'use strict';

    angular.module('app')
        .factory('Devices', Devices);

    Devices.$inject = ['$resource', 'governorUrl', 'PushService'];

    function Devices($resource, governorUrl, PushService) {

        var deviceUrl = governorUrl + '/device' + '/:sendMessageAll';

        var params = {
            sendMessageAll: '@sendMessageAll'
        };

        var actions = {
            pushAll: {
                method: 'GET',
                params: {
                    sendMessageAll: 'sendMessageAll'
                }
            },

            register: {
                method: 'POST',
            },

            update: {
                method: 'PUT'
            }
        };

        var service = $resource(deviceUrl, params, actions);

        service.getDeviceIdSync = function() {
            var deviceId = PushService.getDeviceId();
            return deviceId;
        };

        return service;
    }
})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Likes', Likes);

    Likes.$inject = ['$resource', 'governorUrl'];

    function Likes($resource, governorUrl) {

        var likesUrl = governorUrl + '/post' + '/:like' + '/:unlike';

        var params = {
            like: '@like',
            unlike: '@unlike'
        };
        var actions = {
            likePost: {
                method: 'POST'
            },
            unlikePost: {
                method: 'DELETE'
            }
        };

        var service = $resource(likesUrl, params, actions);

        return service;
    }

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Messages', Messages);

  Messages.$inject = ['$resource', 'governorUrl'];

  function Messages($resource, governorUrl) {

    var likesUrl = governorUrl + '/message' + '/:sender' + '/:list';

    var params = {
      sender: '@sender',
      list: '@list',
    };
    var actions = {
      getMyInboxSenderList: {
        method: 'GET',
        params: {
          sender: 'sender',
          list: 'list'
        }
      },

      readMessagesFrom: {
        method: 'GET'
      },

      sendMessage: {
        method: 'POST'
      }
    };

    var service = $resource(likesUrl, params, actions);

    return service;
  }

})();

(function() {
    'use strict';

    angular.module('app')
        .factory('Photos', Photos);

    Photos.$inject = ['$resource', 'governorUrl', 'AuthService', '$cordovaFileTransfer'];

    function Photos($resource, governorUrl, AuthService, $cordovaFileTransfer) {

        var photosUrl = governorUrl + '/photo';

        var params = {};

        var actions = {
            removePhoto: {
                method: 'DELETE'
            }
        };

        var service = $resource(photosUrl, params, actions);

        service.uploadPhoto = function(parameters, post) {
            angular.extend(post, parameters);
            var filePath = post.file ? post.file : '[]';
            delete post.file;
            var options = {
                params: post,
                chunkedMode: false,
                headers: {
                    Connection: "close",
                    Authorization: 'Bearer ' + AuthService.getToken()
                }
            };
            console.log(post);
            return {
                '$promise': $cordovaFileTransfer.upload(governorUrl + '/photo', filePath, options, true)
            };
        };

        return service;
    }

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Places', Places);

  Places.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer'];

  function Places($resource, governorUrl, $cordovaFileTransfer) {

    var placeUrl = governorUrl + '/place' +
      '/:findOne' +

      // Old Stuff
      '/:list' + '/:mine' + '/:within' + '/:image' + '/:photos' + '/:getPlace';

    var params = {
      findOne: '@findOne',
      //Old Stuff
      list: '@list',
      mine: '@mine',
      within: '@within',
      image: '@image',
      photos: '@photos',
      getPlace: '@getPlace'
    };

    var actions = {
      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },
      getPlace: {
        method: 'GET',
        params: {
          getPlace: 'getPlace'
        }
      },

      getPlaces: {
        method: 'GET',
        params: {
          list: 'list'
        }
      },
      getMyPlaces: {
        method: 'GET',
        params: {
          list: 'list',
          mine: 'mine'
        }
      },
      getPlacesWithin: {
        method: 'GET',
        params: {
          list: 'list',
          within: 'within'
        }
      },
      getPlacePhotos: {
        method: 'GET',
        params: {
          photos: 'photos'
        },
        isArray: true
      },
      findById: {
        method: 'GET'
      },

      createPlace: {
        method: 'POST'
      },
      createPlaceWithImage: {
        method: 'POST',
        params: {
          image: 'image'
        }
      },
      updatePlace: {
        method: 'PUT',
        isArray: true

      },
      updateMyPlace: {
        method: 'PUT',
        params: {
          mine: 'mine'
        },
        isArray: true
      },
      updatePlaceWithImage: {
        method: 'PUT',
        params: {
          image: 'image'
        }
      },
      removePlace: {
        method: 'DELETE'
      }
    };

    var service = $resource(placeUrl, params, actions);

    //------------------------
    //  CUSTOM NON-HTTP METHODS
    //------------------------
    service.createPlaceWithImage = function(parameters, place) {
      angular.extend(place, parameters);
      var filePath = place.file;
      delete place.file;
      var options = {
        params: place,
        chunkedMode: false
      };
      return {
        '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
      };
    };

    service.updatePlaceWithImage = function(parameters, place) {
      angular.extend(place, parameters);
      var filePath = place.file;
      delete place.file;
      var options = {
        params: place,
        chunkedMode: false,
        httpMethod: 'PUT'
      };
      return {
        '$promise': $cordovaFileTransfer.upload(governorUrl + '/place/image', filePath, options)
      };

    };
    return service;
  }

})();

(function() {
  'use strict';
  angular.module('app')
    .factory('Posts', Posts);

  Posts.$inject = ['$resource', 'governorUrl', '$cordovaFileTransfer', 'AuthService'];

  function Posts($resource, governorUrl, $cordovaFileTransfer, AuthService) {

    var postUrl = governorUrl + '/post' +
      '/:find' + '/:findOne' +

      // Old
      '/:list' + '/:image' + '/:mine' + '/:like';


    var params = {
      find: '@find',
      findOne: '@findOne',
      // Old
      list: '@list',
      image: '@image',
      mine: '@mine',
      like: '@like'
    };

    var actions = {
      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },
      findOne: {
        method: 'GET',
        params: {
          findOne: 'findOne'
        }
      },

      // old
      getPosts: {
        method: 'GET',
        params: {
          list: 'list'
        }
      },
      getMyPosts: {
        method: 'GET',
        params: {
          list: 'list',
          mine: 'mine'
        }
      },
      findById: {
        method: 'GET'
      },
      createPost: {
        method: 'POST'
      },
      updatePost: {
        method: 'PUT'
      },
      likePost: {
        method: 'POST',
        params: {
          like: 'like'
        }
      },
      removePost: {
        method: 'DELETE'
      }
    };

    var service = $resource(postUrl, params, actions);

    //------------------------
    //  CUSTOM NON-HTTP METHODS
    //------------------------
    service.createPostWithImage = function(parameters, post) {
      angular.extend(post, parameters);
      var filePath = post.file ? post.file : '[]';
      delete post.file;
      post.category = "SHOW-POST";
      var options = {
        params: post,
        chunkedMode: false,
        headers: {
          Connection: "close",
          Authorization: 'Bearer ' + AuthService.getToken()
        }
      };
      console.log(post);
      return {
        '$promise': $cordovaFileTransfer.upload(governorUrl + '/post', filePath, options, true)
      };
    };

    service.updatePostWithImage = function(parameters, post) {
      angular.extend(post, parameters);
      var filePath = post.file;
      delete post.file;
      var options = {
        params: post,
        chunkedMode: false,
        httpMethod: 'PUT',
        headers: {
          Connection: "close",
          Authorization: 'Bearer ' + AuthService.getToken()
        }
      };
      return {
        '$promise': $cordovaFileTransfer.upload(governorUrl + '/post', filePath, options, true)
      };

    };

    return service;
  }

  // Post.get({
  //     list: 'list',
  //     category: 'SHOW-POST'
  // }).$promise
  //     .then(function success() {}, function err() {})

  // Posts.createPostWithImage({}, postWithFile).$promise
  //     .then(function success() {}, function error() {}, function progress(progress) {})

  // require id in postWithFile sails' req.param('id') not only look at url params but
  //also looks at the body of req, it is a sails spcific feature.
  // Posts.createPostWithImage({}, postWithFile).$promise
  //     .then(function success() {}, function error() {}, function progress(progress) {})


})();

(function() {
  'use strict';
  angular.module('app')
    .factory('Products', Products);

  Products.$inject = ['$resource', 'governorUrl'];

  function Products($resource, governorUrl) {

    var productUrl = governorUrl + '/product' + '/:list' +
      '/:image' + '/:mine' + '/:checkProductCode' + '/:ids' + '/:comments' + '/:within' + '/:like' + '/:unlike' + '/:setSoldOut' + '/:unsetSoldOut' + '/:find' + '/:getProductsWithin' + '/:getProduct' + '/:getProducts' + '/:destroy';

    var params = {
      list: '@list',
      image: '@image',
      mine: '@mine',
      checkProductCode: '@checkProductCode',
      ids: '@ids',
      comments: '@comments',
      within: '@within',
      like: '@like',
      unlike: '@unlike',
      setSoldOut: '@setSoldOut',
      unsetSoldOut: '@unsetSoldOut',
      find: '@find',

      getProductsWithin: '@getProductsWithin',
      getProduct: '@getProduct',
      getProducts: '@getProducts',
      destroy: '@destroy'
    };

    var actions = {

      destroy: {
        method: 'DELETE',
        params: {
          destroy: 'destroy'
        }
      },
      getProductsWithin: {
        method: 'GET',
        params: {
          getProductsWithin: 'getProductsWithin'
        }
      },

      getProduct: {
        method: 'GET',
        params: {
          getProduct: 'getProduct'
        }
      },

      getProducts: {
        method: 'GET',
        params: {
          getProducts: 'getProducts'
        }
      },





      find: {
        method: 'GET',
        params: {
          find: 'find'
        }
      },
      setSoldOut: {
        method: 'PUT',
        params: {
          setSoldOut: 'setSoldOut'
        }
      },

      unsetSoldOut: {
        method: 'PUT',
        params: {
          unsetSoldOut: 'unsetSoldOut'
        }
      },

      unlike: {
        method: 'PUT',
        params: {
          unlike: 'unlike'
        }
      },

      like: {
        method: 'PUT',
        params: {
          like: 'like'
        }
      },

      getProductWithin: { // longitude, latitude, distance
        method: 'GET',
        params: {
          list: 'list',
          within: 'within'
        }
      },

      getProductsWithComments: {
        method: 'GET',
        params: {
          comments: 'comments'
        },
        isArray: true
      },
      getProductsWithIds: {
        method: 'GET',
        params: {
          ids: 'ids'
        },
        isArray: true
      },
      getMyProducts: {
        method: 'GET',
        params: {
          list: 'list',
          mine: 'mine'
        }
      },
      checkProductCode: {
        method: 'GET',
        params: {
          checkProductCode: 'checkProductCode'
        }
      },
      findById: {
        method: 'GET'
      },
      createProduct: {
        method: 'POST'
      },
      updateProduct: {
        method: 'PUT',
        isArray: true
      },
      removeProduct: {
        method: 'DELETE'
      },
      removeProducts: {
        method: 'DELETE',
        isArray: true
      }
    };

    var service = $resource(productUrl, params, actions);

    return service;

  } //end
})();





// /* Set the default values for ngf-select and ngf-drop directives*/
// Upload.setDefaults({
//   ngfMinSize: 20000,
//   ngfMaxSize: 20000000,
// });

// /* Convert the file to base64 data url*/
// Upload.dataUrl(file, disallowObjectUrl).then(function(url) {});

// /* Get image file dimensions*/
// Upload.imageDimensions(file).then(function(dimensions) {
//   console.log(dimensions.width, dimensions.height);
// });

// /* Get audio/video duration*/
// Upload.mediaDuration(file).then(function(durationInSeconds) {

// });

// /* returns boolean showing if image resize is supported by this browser*/
// Upload.isResizeSupported();
// /* returns boolean showing if resumable upload is supported by this browser*/
// Upload.isResumeSupported();

(function() {
    'use strict';

    angular.module('app')
        .factory('RoyaltyPoints', RoyaltyPoints);

    RoyaltyPoints.$inject = ['$resource', 'governorUrl'];

    function RoyaltyPoints($resource, governorUrl) {

        var royaltyUrl = governorUrl + '/royaltyPoint' + '/:list' + '/:mine';

        var params = {
            list: '@list',
            mine: '@mine'
        };

        var actions = {
            getRoyaltyPoints: {
                method: 'GET',
                params: {
                    list: 'list'
                }
            },

            getMyRoyaltyPoints: {
                method: 'GET',
                params: {
                    list: 'list',
                    mine: 'mine'
                }
            },

            findById: {
                method: 'GET'
            },

            createRoyaltyPoint: {
                method: 'POST',
            },

            updateRoyaltyPoint: {
                method: 'PUT',
                isArray: true
            },

            removeRoyaltyPoint: {
                method: 'DELETE'
            }
        };

        var service = $resource(royaltyUrl, params, actions);

        return service;
    }

})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Users', Users);


  Users.$inject = ['$resource', 'governorUrl'];

  function Users($resource, governorUrl) {

    var userUrl = governorUrl + '/:auth' + '/:register' + '/:user' +
      '/:findOne' + '/:update' + '/:changePassword' + '/:checkEmail' +
      // old stuff
      '/:local' + '/:checkNickname' + '/:list' + '/:role' + '/:myrole' + '/:updateWithImage' + '/:registerPlaceOwner';

    var params = {

      user: '@user',
      findOne: '@findOne',
      update: '@update',
      changePassword: '@changePassword',

      auth: '@auth',
      register: '@register',
      checkNickname: '@checkNickname',
      checkEmail: '@checkEmail',
      list: '@list',
      role: '@role',
      myrole: '@myrole',
      updateWithImage: '@updateWithImage',
      registerPlaceOwner: '@registerPlaceOwner'
    };

    var actions = {

      findOne: {
        method: 'GET',
        params: {
          user: 'user',
          findOne: 'findOne'
        }
      },

      update: {
        method: 'PUT',
        params: {
          user: 'user',
          update: 'update',
          role: undefined
        }
      },

      changePassword: {
        method: 'PUT',
        params: {
          auth: 'auth',
          local: 'changePassword'
        }
      },

      checkEmail: {
        method: 'GET',
        params: {
          user: 'user',
          checkEmail: 'checkEmail'
        }
      },

      // Old stuff
      getUsers: {
        method: 'GET',
        params: {
          user: 'user',
          list: 'list'
        }
      },
      register: {
        method: 'POST',
        params: {
          register: 'register',
          role: undefined
        }
      },
      registerPlaceOwner: {
        method: 'POST',
        params: {
          registerPlaceOwner: 'registerPlaceOwner',
          role: undefined
        }
      },
      checkNickname: {
        method: 'GET',
        params: {
          user: 'user',
          checkNickname: 'checkNickname'
        }
      },
      login: {
        method: 'POST',
        params: {
          auth: 'auth',
          local: 'local'
        }
      },
      getMyRole: {
        method: 'GET',
        params: {
          role: 'role',
          myrole: 'myrole'
        }
      },
      updateProfileWithImage: {
        method: 'PUT',
        params: {
          user: 'user',
          updateWithImage: 'updateWithImage'
        }
      },
      updateUser: {
        method: 'PUT',
        params: {
          user: 'user',
          update: 'update'
        },
        isArray: true
      }
    };

    var service = $resource(userUrl, params, actions);

    return service;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('daum', daum);

  daum.$inject = ['$window'];

  function daum($window) {

    return $window.daum;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Firebase', Firebase);

  Firebase.$inject = ['$window'];

  function Firebase($window) {
    return $window.Firebase;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('localStorage', localStorage);

  localStorage.$inject = ['$window'];

  function localStorage($window) {

    return $window.localStorage;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('moment', moment);

  moment.$inject = ['$window'];

  function moment($window) {

    return $window.moment;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('_', _);

  _.$inject = ['$window'];

  function _($window) {

    return $window._;
  }
})();

(function() {
    'use strict';


    angular.module('applicat.push.service', ['ngCordova'])
        .service('PushService', PushService);


    PushService.$inject = ['$http', '$log', '$q', '$cordovaPush', '$cordovaToast', '$cordovaDialogs',
        '$cordovaLocalNotification', '$rootScope', 'googlePushSenderID', 'governorUrl',
        'appName', 'LocalService'
    ];

    function PushService($http, $log, $q, $cordovaPush, $cordovaToast, $cordovaDialogs,
        $cordovaLocalNotification, $rootScope, googlePushSenderID, governorUrl,
        appName, LocalService) {




        /********************************
         *      Instance Variables
         ********************************/

        var TYPE_ANDROID = 'ANDROID';
        var TYPE_IOS = 'IOS';
        var deviceId = null;

        /********************************
         *           Interfaces
         ********************************/

        this.getDeviceId = getDeviceId;

        this.registerDevice = registerDevice;

        this.updateDeviceToken = updateDeviceToken;

        /********************************
         *         Implementation
         ********************************/

        function getDeviceId() {
            return deviceId;
        }


        function registerDevice() {

            $log.info("PushService - Register push notification");

            var config = null;

            if (ionic.Platform.isAndroid()) {
                $log.info("PushService - Android push" + googlePushSenderID);
                config = {
                    "senderID": googlePushSenderID
                };
            } else if (ionic.Platform.isIOS()) {
                $log.info("PushService - IOS push");
                config = {
                    "badge": "true",
                    "sound": "true",
                    "alert": "true"
                };
            }

            if (!config) {
                $log.info("PushService - Not a supported device");


            }

            $cordovaPush.register(config).then(function(result) {
                $log.info("PushService - Register success " + result);

                console.log("PushService - Register success " + result);
                // ** NOTE: Android regid result comes back in the pushNotificationReceived, only iOS returned here
                if (ionic.Platform.isIOS()) {

                    // Needs to change to out server call
                    storeDeviceToken(result, TYPE_IOS);
                }

            }, function(err) {
                $log.info("PushService - Register error " + err)
            });

        }

        function updateDeviceToken(active) {

            var deferred = $q.defer();


            $http({
                url: governorUrl + '/device',
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                params: {
                    "deviceId": getDeviceId(),
                    "active": active
                }
            })
                .success(function(data, status, headers, config) {
                    $log.info("PushService - Success updating device push settings " + JSON.stringify(data));
                    deferred.resolve(data);
                })
                .error(function(data, status, headers, config) {
                    deferred.reject(data);
                    $log.info("PushService - Failed updating device push settings");
                });

            return deferred.promise;

        };


        /********************************
         *        Private Method
         ********************************/

        // Stores the device token app server
        function storeDeviceToken(deviceId, deviceType) {

            var registration = {
                deviceId: deviceId,
                platform: deviceType,
                active: true
            }

            $log.info("PushService - register to server: " + JSON.stringify(registration));

            // Get Interest
            var deferred = $q.defer();

            $http({
                url: governorUrl + '/device',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                data: registration
            })
                .success(function(data, status, headers, config) {
                    $log.info("PushService - registered to server: " + JSON.stringify(data));

                    // Set devicePushId in PushService
                    console.log('this is data');
                    console.log(data);
                    setDeviceId(data.device.deviceId);

                    // If push setting exist than set the PushService
                    if (angular.isDefined(data.device.optionalType))
                        setTradeNotification(data.device.optionalType);

                })
                .error(function(data, status, headers, config) {
                    $log.info("PushService - error: " + JSON.stringify(data));
                });

        }


        // Android Notification Received Handler
        function handleAndroid(notification) {
            // ** NOTE: ** You could add code for when app is in foreground or not, or coming from coldstart here too
            //             via the console fields as shown.
            $log.info("In foreground " + JSON.stringify(notification));

            switch (notification.event) {
                case 'registered':

                    if (notification.regid.length > 0) {
                        storeDeviceToken(notification.regid, TYPE_ANDROID);
                    }

                    break;
                case 'message':
                    $log.info(JSON.stringify(notification));

                    window.plugin.notification.local.schedule({
                        title: notification.payload.title,
                        text: notification.payload.message,
                        icon: "res://icon.png",
                        smallIcon: "res://pushicon.png"

                        // parameter documentation:
                        // https://github.com/katzer/cordova-plugin-local-notifications#further-informations-1
                    });

                    break;
                case 'error':
                    $log.info('error');
                    $cordovaDialogs.alert(notification.msg, "Push notification error event");
                    break;
                default:
                    $log.info('default');
                    $cordovaDialogs.alert(notification.event, "Push notification handler - Unprocessed Event");
                    break;
            }
        }

        function setDeviceId(value) {
            deviceId = value;
        }

        // IOS Notification Received Handler
        function handleIOS(notification) {
            //// The app was already open but we'll still show the alert and sound the tone received this way. If you didn't check
            //// for foreground here it would make a sound twice, once when received in background and upon opening it from clicking
            //// the notification when this code runs (weird).
            //if (notification.foreground == "1") {
            //    // Play custom audio if a sound specified.
            //    if (notification.sound) {
            //        var mediaSrc = $cordovaMedia.newMedia(notification.sound);
            //        mediaSrc.promise.then($cordovaMedia.play(mediaSrc.media));
            //    }
            //
            //    if (notification.body && notification.messageFrom) {
            //        $cordovaDialogs.alert(notification.body, notification.messageFrom);
            //    }
            //    else $cordovaDialogs.alert(notification.alert, "Push Notification Received");
            //
            //    if (notification.badge) {
            //        $cordovaPush.setBadgeNumber(notification.badge).then(function (result) {
            //            $log.info("Set badge success " + result)
            //        }, function (err) {
            //            $log.info("Set badge error " + err)
            //        });
            //    }
            //}
            //// Otherwise it was received in the background and reopened from the push notification. Badge is automatically cleared
            //// in this case. You probably wouldn't be displaying anything at this point, this is here to show that you can process
            //// the data in this situation.
            //else {
            //    if (notification.body && notification.messageFrom) {
            //        $cordovaDialogs.alert(notification.body, "(RECEIVED WHEN APP IN BACKGROUND) " + notification.messageFrom);
            //    }
            //    else $cordovaDialogs.alert(notification.alert, "(RECEIVED WHEN APP IN BACKGROUND) Push Notification Received");
            //}
        }

        $rootScope.$on('$cordovaPush:notificationReceived', function(event, notification) {
            if (ionic.Platform.isAndroid()) {
                handleAndroid(notification);
            } else if (ionic.Platform.isIOS()) {
                handleIOS(notification);
            }
        });

        function getPushSetting() {
            var setting = JSON.parse(LocalService.get(appName + '_setting'));
            if (setting)
                return setting.push;
            else
                return false;
        }

    };
})();

//====================================================
// createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('AppService', AppService);

  AppService.$inject = ['Products', 'ProductListModel', 'U', 'Message', 'appStorage'];

  function AppService(Products, ProductListModel, U, Message, appStorage) {

    var service = {
      //MyProductList
      getMyPawnShopProducts: getMyPawnShopProducts,
      getMarketProducts: getMarketProducts,
      getPawnShopProducts: getPawnShopProducts,
      productListFind: productListFind,
      preloadState: preloadState
    };

    return service;

    function preloadState(state, params) {
      Message.loading();
      var query;
      var onData;
      //====================================================
      //  마켓
      //====================================================
      if (state === 'main.productList.market') {
        query = {
          where: {
            category: 'market'
          },
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        };
        onData = function(productsWrapper) {
          ProductListModel.market.products = productsWrapper.products;
          ProductListModel.market.more = productsWrapper.more;
          return U.preload(ProductListModel.market.products, 'cloudinary200', true);
        };
        //====================================================
        //  전당포
        //====================================================
      } else if (state === 'main.productList.pawnShop') {
        query = {
          where: {
            category: 'pawnShop'
          },
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        };
        onData = function(productsWrapper) {
          ProductListModel.pawnShop.products = productsWrapper.products;
          ProductListModel.pawnShop.more = productsWrapper.more;
          return U.preload(ProductListModel.pawnShop.products, 'cloudinary200', true);
        };
      }

      return Products.find(query).$promise
        .then(onData);
    }

    function productListFind(category, model) {
      Message.loading();
      return Products.find({
          where: {
            category: category
          },
          limit: 10
        }).$promise
        .then(function(productsWrapper) {
          model.products = productsWrapper.products;
          model.more = productsWrapper.more;
          return U.preload(model.products, 'cloudinary200', true);
        });
    }

    function getMyPawnShopProducts() {
      Message.loading();
      return Products.find({
          where: {
            id: appStorage.user.id,
            category: 'market'
          },
          limit: 10,
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          MyProductListModel.products = productsWrapper.products;
          MyProductListModel.more = productsWrapper.more;
          return U.preload(MyProductListModel.products, 'cloudinary200', true);
        });
    }

    // return Products.getProducts({
    //     category: 'market',
    //     limit: 10,
    //     sort: 'id DESC',
    //     populates: 'photos,place'
    //   }).$promise
    function getMarketProducts() {
      Message.loading();
      return Products.find({
          where: {
            category: 'market'
          },
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          ProductListModel.market.products = productsWrapper.products;
          ProductListModel.market.more = productsWrapper.more;
          return U.preload(ProductListModel.products, 'cloudinary200', true);
        });
    }

    function getPawnShopProducts() {
      Message.loading();
      return Products.find({
          where: {
            category: 'pawnShop'
          },
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          ProductListModel.pawnShop.products = productsWrapper.products;
          ProductListModel.pawnShop.more = productsWrapper.more;
          return U.preload(ProductListModel.products, 'cloudinary200', true);
        });
    }

  } // Service END
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('appStorage', appStorage);

  appStorage.$inject = ['$localStorage', 'appName'];

  function appStorage($localStorage, appName) {

    setInitialState();

    return $localStorage[appName];

    //====================================================
    //  Implementations
    //====================================================
    function setInitialState() {
      if (!$localStorage[appName]) {
        $localStorage[appName] = {};
      }
      var storage = $localStorage[appName];
      if (storage.firstTime === undefined) {
        storage.firstTime = true;
      }
    }

    //====================================================
    //  Helper
    //====================================================
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AuthInterceptor', AuthInterceptor);

  AuthInterceptor.$inject = ['$q', '$injector', '$location', 'LocalService', 'appName', 'appStorage'];

  function AuthInterceptor($q, $injector, $location, LocalService, appName, appStorage) {

    return {
      request: function(req) {
        var token = appStorage.token;
        if (token) {
          req.headers.Authorization = 'Bearer ' + token;
        }
        return req;
      }




      // , responseError: function(response) {
      //     if (response.status === 401 || response.status === 403 || response.status === 405 || response.status === 498) {

      //         if ($location.path() !== "/login") {

      //             var appToken = appName + '_auth_token';
      //             delete $localStorage[appToken];
      //             // LocalService.unset(appName + '_auth_token');
      //             $location.path("/login");

      //             if (response.data == null) {
      //                 response.data = {
      //                     message: "권한이 없는 페이지이거나 로그인하지 않았습니다. 로그인해주세요."
      //                 };
      //             }
      //         } else {
      //             response.data.hideMessage = true;
      //         }
      //     } else if (response.status === 300) {

      //         var redirectPath = null;
      //         var message = '';
      //         switch (response.data.redirectCode) {
      //             case 'ACTIVATE':
      //                 redirectPath = "/resend/false";
      //                 message: "이메일 인증을 하셔야 서비스 이용이 가능합니다.";
      //                 break;
      //             case 'RESET':
      //                 redirectPath = "/passReset";
      //                 message: "비밀번호를 봐꿔주세요.";
      //                 break;
      //         }

      //         if ($location.path() !== redirectPath) {

      //             $location.path(redirectPath);

      //             if (response.data == null) {
      //                 response.data = {
      //                     message: message
      //                 };
      //             }
      //         } else {
      //             response.data.hideMessage = true;
      //         }
      //     }
      //     return $q.reject(response);
      // }
    };
  }


  angular.module('app')
    .service("AuthService", AuthService);

  AuthService.$inject = ['$http', '$q', '$location', '$state', 'governorUrl', 'LocalService', 'appName', 'kakaoKey', 'facebookKey', '$cordovaOauth'];

  function AuthService($http, $q, $location, $state, governorUrl, LocalService, appName, kakaoKey, facebookKey, $cordovaOauth) {

    // var user = null;
    // var selectedApp = {
    //     name: '어플리켓'
    // };

    // function setUser(userInfo) {
    //     user = userInfo;
    // }

    // this.getUser = function() {
    //     return user;
    // }

    // function setApp(app) {
    //     $rootScope.appName = app.name;
    //     selectedApp = app;
    // }

    // this.getApp = function() {
    //     return selectedApp;
    // }

    // this.getToken = function() {
    //     var token = LocalService.get(appName + '_auth_token');

    //     if (token) {
    //         token = angular.fromJson(LocalService.get(appName + '_auth_token')).token;
    //         return token;
    //     } else {
    //         $state.go('login');
    //     }
    // }

    // this.init = function() {
    //     var token = JSON.parse(LocalService.get(appName + '_auth_token'));
    //     if (token != null && token.user != null)
    //         setUser(token.user);
    // }

    // this.register = function(user) {

    //     var deferred = $q.defer();

    //     $http({
    //         url: governorUrl + '/user/register',
    //         method: 'post',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         params: user
    //     })
    //         .success(function(data, status, headers, config) {
    //             deferred.resolve(data);
    //         })
    //         .error(function(data, status, headers, config) {
    //             deferred.reject(data);
    //         });
    //     return deferred.promise;
    // }

    this.registerWithImage = function(user, file, success, fail) {

      var options = new FileUploadOptions();

      var newUser = angular.copy(user);

      options.params = newUser;
      options.headers = {
        Connection: "close"
      }
      options.chunkedMode = false;

      var ft = new FileTransfer();

      ft.upload(file, encodeURI(governorUrl + '/user/registerWithImage'), success, fail, options, true);
    }

    // this.login = function(email, password) {

    //     var deferred = $q.defer();

    //     $http({
    //         url: governorUrl + '/auth/local',
    //         method: 'post',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         data: {
    //             'identifier': email,
    //             'password': password
    //         }
    //     })
    //         .success(function(data, status, headers, config) {

    //             console.log(data);
    //             LocalService.set(appName + '_auth_token', JSON.stringify(data));
    //             setUser(data.user);

    //             deferred.resolve(data);
    //         })
    //         .error(function(data, status, headers, config) {
    //             console.log(data);
    //             deferred.reject(data);
    //         });

    //     return deferred.promise;

    // }

    this.verifyResetCode = function(email, code) {

      var deferred = $q.defer();


      $http({
        url: governorUrl + '/user/passwordresetcomplete',
        method: 'put',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'email': email,
          'code': code
        }
      })
        .success(function(data, status, headers, config) {
          LocalService.set(appName + '_auth_token', JSON.stringify(data));
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });

      return deferred.promise;

    }

    this.passReset = function(email) {

      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/resetStart',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'email': email
        }
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });
      return deferred.promise;
    }

    // this.logout = function() {
    //     LocalService.unset(appName + '_auth_token');
    //     setUser(null);
    //     $location.path("/login");
    // }

    this.changePassword = function(oldPassword, newPassword) {

      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/changePassword',
        method: 'post',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          'oldPassword': oldPassword,
          'newPassword': newPassword
        }
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });

      return deferred.promise;
    }

    this.checkNickname = function(nickname) {

      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/checknickname',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
        params: {
          nickname: nickname
        }
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });
      return deferred.promise;
    }

    this.checkEmail = function(email) {

      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/checkEmail',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
        params: {
          email: email
        }
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });
      return deferred.promise;
    }

    this.getMyProfile = function() {
      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/profile',
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });
      return deferred.promise;
    }

    this.updateMyProfile = function(nickname) {
      var deferred = $q.defer();

      $http({
        url: governorUrl + '/user/update',
        method: 'put',
        headers: {
          'Content-Type': 'application/json'
        },
        data: {
          nickname: nickname
        }
      })
        .success(function(data, status, headers, config) {
          deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
          deferred.reject(data);
        });
      return deferred.promise;
    }

    this.updateMyProfileWithImage = function(user, file, success, fail) {

      var options = new FileUploadOptions();

      var updateUser = angular.copy(user);

      options.params = updateUser;
      options.httpMethod = 'PUT';
      options.headers = {
        Connection: "close",
        Authorization: 'Bearer ' + this.getToken()
      }
      options.chunkedMode = false;

      var ft = new FileTransfer();

      ft.upload(file, encodeURI(governorUrl + '/user/updateWithImage'), success, fail, options, true);
    }


    this.loginWithKakao = function() {

      var deferred = $q.defer();

      $cordovaOauth.kakao(kakaoKey).then(function(result) {
        result.provider = 'kakao';

        console.log('kakao server result');
        console.log(result);
        $http({
          url: governorUrl + '/auth/register',
          method: 'post',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        })
          .success(function(data, status, headers, config) {

            LocalService.set(appName + '_auth_token', JSON.stringify(data));
            console.log('kakao response from server');
            console.log(JSON.stringify(data, null, 2));
            console.log(JSON.stringify(data.user, null, 2));
            setUser(data.user);

            deferred.resolve({
              message: 'done'
            });
          })
          .error(function(data, status, headers, config) {
            console.log(data);
            deferred.reject(data);
          });


      }, function(error) {
        deferred.reject(error);
      });

      return deferred.promise;
    }

    this.loginWithFacebook = function() {

      var deferred = $q.defer();

      $cordovaOauth.facebook(facebookKey, ["email"]).then(function(result) {
        result.provider = 'facebook';

        console.log('facebook server result');
        console.log(result);
        $http({
          url: governorUrl + '/auth/register',
          method: 'post',
          headers: {
            'Content-Type': 'application/json'
          },
          data: result
        })
          .success(function(data, status, headers, config) {

            LocalService.set(appName + '_auth_token', JSON.stringify(data));
            setUser(data.user);
            console.log('facebook response from our server');
            console.log(JSON.stringify(data, null, 2));
            console.log(JSON.stringify(data.user, null, 2));

            deferred.resolve({
              message: 'done'
            });
          })
          .error(function(data, status, headers, config) {
            console.log(data, status, headers, config);
            deferred.reject(data);
          });


      }, function(error) {
        deferred.reject(error);
      });

      return deferred.promise;
    }





  }


})();

// Input:
//p1, p2, where p1,p2 = {latitude: float, longitude: float}

// Usage
// Distance.between({latitude: 33, longitude: 33}, {latitude: 44, longitude:44});

// Output: distance between two points in meters.
// 20000
(function() {
  'use strict';

  angular.module('app')
    .factory('Distance', Distance);

  // Distance.$inject = [];

  function Distance() {

    var service = {
      between: haversine
    };

    return service;


    //====================================================
    //  IMPLEMENTATIONS
    //====================================================
    //p1, p2 = {latitude: 33, longitude: 33}
    function haversine(p1, p2) {
      var R = 6384;
      var dLat = rad(p2.latitude - p1.latitude);
      var dLong = rad(p2.longitude - p1.longitude);

      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(rad(p1.latitude)) * Math.cos(rad(p2.latitude)) * Math.sin(dLong / 2) * Math.sin(dLong / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;

      var meters = d * 1000;
      return meters;
    }
    //====================================================
    //  HELPER
    //====================================================
    function rad(x) {
      return x * Math.PI / 180;
    }

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('Dom', Dom);

  Dom.$inject = ['$timeout', '$window'];

  function Dom($timeout, $window) {
    var service = {
      focusById: focusById,
      blurById: blurById,
    };

    return service;

    // USAGE;
    // <input id="daum-map-search-input" type="text">
    // Dom.focusById('daum-map-search-input');
    function focusById(id) {
      $timeout(function() {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.focus();
        }
      }, 0);
    }

    function blurById(id) {
      $timeout(function() {
        var domElement = $window.document.getElementById(id);
        if (domElement) {
          domElement.blur();
        }
      }, 0);
    }
  }

})();

//====================================================
// createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('FavoriteService', FavoriteService);

  FavoriteService.$inject = ['appStorage', 'Products', 'Posts'];

  function FavoriteService(appStorage, Products, Posts) {

    var service = {
      likeProduct: likeProduct,
      unlikeProduct: unlikeProduct,
      likePost: likePost,
      unlikePost: unlikePost,
      toggleProduct: toggleProduct,
      togglePost: togglePost,
      toggleSaveToFavorite: toggleSaveToFavorite,
      isFavorite: isFavorite
    };

    return service;

    //====================================================
    //  Implementation
    //====================================================

    function likePost(postId) {
      return Posts
        .like({
          id: postId
        }).$promise;
    }

    function unlikePost(postId) {
      return Posts
        .unlike({
          id: postId
        }).$promise;
    }

    function likeProduct(id) {
      return Products
        .like({
          id: id
        }).$promise;
    }

    function unlikeProduct(id) {
      return Products
        .unlike({
          id: id
        }).$promise;
    }

    function toggleProduct(id) {
      var promise;
      if (isFavorite(id)) {
        promise = unlikeProduct(id);
      } else if (!isFavorite(id)) {
        promise = likeProduct(id);
      }
      return promise
        .then(function success(product) {
          toggleSaveToFavorite(id);
          return product;
        })
        .catch(function error(err) {
          console.log(err);
        });
    }

    function togglePost(postId) {
      var promise;
      if (isFavorite(postId)) {
        promise = unlikePost(postId);
      } else if (!isFavorite(postId)) {
        promise = likePost(postId);
      }
      return promise
        .then(function success(post) {
          toggleSaveToFavorite(postId);
          return post;
        })
        .catch(function error(err) {
          console.log(err);
        });
    }

    //====================================================
    //  FavoriteService.toggleSaveToFavorite
    //====================================================
    // Usage;
    //FavoriteService.toggleFavorite('1asf31sf1adf31')
    // Output(localStorage favorites array);
    //appStoragefavorites.
    function toggleSaveToFavorite(id) {
      if (!Array.isArray(appStorage.favorites)) {
        appStorage.favorites = [];
      }
      if (isFavorite(id)) { //delte favorite
        var index = appStorage.favorites.indexOf(id);
        appStorage.favorites.splice(index, 1);
      } else if (!isFavorite(id)) { // add favorite
        appStorage.favorites.push(id);
      }
      return appStorage.favorites;
    }


    //====================================================
    //  FavoriteService.isFavorite
    //====================================================
    // Usage;
    //FavoriteService.isFavorite('1asf31sf1adf31')
    // Output(boolean if id exists in appStorage.favorites);
    //true || false
    function isFavorite(id) {
      if (!Array.isArray(appStorage.favorites)) {
        appStorage.favorites = [];
      }
      for (var i = 0; i < appStorage.favorites.length; i++) {
        if (String(id) === String(appStorage.favorites[i])) {
          return true;
        }
      }
      return false;
    }

  } // Service END
})();

// Usage;
// $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
//
// function onBeforeEnter(){
//   return ImagePreload.preload([
//     'http://placehold.it/1000x1000',
//     'http://placehold.it/1200x1200',
//     'http://placehold.it/1200x1200',
//     'http://placehold.it/1200x1200'
//   ])
//   .then(function (){
//     console.log('images fetched and cached before view enter');
//   });
// }
(function() {
  'use strict';
  angular.module('app')

  .factory('ImagePreload', ImagePreload);

  ImagePreload.$inject = ['$q'];

  function ImagePreload($q) {
    var service = {
      preload: preload
    };
    return service;

    function preload(urls) {
      var promises = [];
      var images = [];
      angular.forEach(urls, function(url) {
        var deferred = $q.defer();
        var img = new Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
        images.push(img);
      });
      return $q.all(promises);
      //====================================================
      //  helper
      //====================================================
      function onImageLoad(deferred) {
        return function() {
          deferred.resolve();
        };
      }

      function onImageError(deferred, url) {
        return function() {
          deferred.reject(url);
        };
      }
    }

  } //end
})();

//  Dependencies
//ng-file-uploead
//cordovaCamera
//cordovaFile
//MessageService
(function() {
  'use strict';

  angular.module('app')
    .factory('ImageService', ImageService);

  ImageService.$inject = ['governorUrl', '$cordovaCamera', '$cordovaFile', 'Message', '$window', '$timeout', 'Upload'];

  function ImageService(governorUrl, $cordovaCamera, $cordovaFile, Message, $window, $timeout, Upload) {

    var service = {
      get: get,
      post: post,
      clean: clean
    };

    return service;

    //====================================================
    //  ImageService.get Usage
    //====================================================
    //ImageService.get({
    //  from: 'camera', // or gallery
    //  fileUris: arrayToSaveFiles,
    //  dataUris: arrayToSaveBase64Data
    //})
    // Output:
    //arrayToSaveFiles.push(filePath);
    //arrayToSaveBase64Data.push(base64Data);
    function get(params) {
      if (!$window.cordova) return false;

      return $cordovaCamera.getPicture(setOptions())

      .then(function success(filePath) {
        // Save file path (binary data).
        params.fileUris.push(filePath);
        // Read data(base64) from file path
        var name = filePath.substr(filePath.lastIndexOf('/') + 1);
        var namePath = filePath.substr(0, filePath.lastIndexOf('/') + 1);
        return $cordovaFile.readAsDataURL(namePath, name);
      })

      .then(function success(dataUri) {
        // Save data(base64)
        $timeout(function() {
          params.dataUris.push(dataUri);
        }, 0);
      })

      .catch(function error(err) {
        Message.alert('이미지 알림', '이미지 불러오기 실패하였습니다. 갤러리에서 선택해주세요.');
        console.log(err);
      });

      // .done();

      //  getImage helper
      function setOptions() {
        var sourceType;
        if (params.from === 'gallery') {
          sourceType = 0;
        } else if (params.from === 'camera') {
          sourceType = 1;
        }
        var options = {
          allowEdit: true,
          quality: 40,
          destinationType: Camera.DestinationType.FILE_URI,
          encodingType: Camera.EncodingType.JPEG,
          targetWidth: 800,
          correctOrientation: true,
          mediaType: Camera.MediaType.PICTURE,
          cameraDirection: Camera.Direction.BACK,
          sourceType: sourceType
        };
        return options;
      } // end setOptions
    } // end getImage
    //====================================================
    //  ImageService.post Usage
    //====================================================
    //ImageService.post({
    //  url: '/place'
    //  dataUris: arrayOfBase64Data,
    //  fields: {title: '포스트 이름', content: '냠냠냠', ...}
    //})
    // Output:
    //Promise
    // Output Usage:
    //Promise
    //.then(function success(createdPlaceWrapper){
    //  console.log(createdPlaceWrapper.data);
    //})
    //.catch(function error(err){
    //  throw new Error(err);
    //})
    function post(params, method) {
      var dataUris = params.dataUris;
      console.log(dataUris);
      var fields = params.fields;
      var url = params.url;
      if (url[0] !== '/') {
        url = '/' + url;
      }
      // Wrap dataUris in array IF it is not an array.
      dataUris = wrapInArray(dataUris);
      // Convert base64 image to file
      var filesToSend = [];
      angular.forEach(dataUris, function(base64Data) {
        filesToSend.push(base64ToFile(base64Data));
      });

      var promise = Upload.upload({
        url: governorUrl + url,
        method: method || 'POST',
        file: filesToSend,
        fields: fields,
        header: {
          enctype: "multipart/form-data"
          // Authoriztion: "Bearer " + appStorage.token
        }
      });
      return promise;
    } //end post

    function clean() {
      return $cordovaCamera.cleanup();
    }

    //====================================================
    //  HELPERS
    //====================================================
    function wrapInArray(obj) {
      var array = [];
      if (!Array.isArray(obj)) {
        array = [obj];
      } else if (Array.isArray(obj)) {
        array = obj;
      }
      return array;
    }

    function base64ToFile(dataUris) {
      var byteString;
      var mimestring;
      if (dataUris.split(',')[0].indexOf('base64') !== -1) {
        byteString = $window.atob(dataUris.split(',')[1]);
      } else {
        byteString = decodeURI(dataUris.split(',')[1]);
      }
      mimestring = dataUris.split(',')[0].split(':')[1].split(';')[0];
      console.log(mimestring);
      var content = [];
      for (var i = 0; i < byteString.length; i++) {
        content[i] = byteString.charCodeAt(i);
      }
      return new $window.Blob([new $window.Uint8Array(content)], {
        type: mimestring
      });
    }
  } // End
})();

//====================================================
//  createBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Dependencies
//Cordova InAppBrowser
//Cordova SocialSharing
(function() {
  'use strict';

  angular.module('app')
    .factory('LinkService', LinkService);

  LinkService.$inject = ['$window', '$cordovaSocialSharing', 'appStorage', 'Message', '$state'];

  function LinkService($window, $cordovaSocialSharing, appStorage, Message, $state) {

    var service = {
      call: call,
      open: open,
      share: share
    };
    return service;

    //====================================================
    //  LinkService.call Usage
    //====================================================
    //LinkService.call(01011010101)
    // Output
    //phone call
    function call(number) {
      console.log(number);
      if (!appStorage.token) {
        return Message.alert('전화걸기 알림', '로그인을 해주세요.').then(function() {
          $state.go('main.login');
        });
      }
      $window.location.href = 'tel:' + number;
    }

    //====================================================
    //  LinkService.openLink Usage
    //====================================================
    //LinkService.openLink('http://www.applicat.co.kr');
    // Output
    //InAppBrowser open new window with url
    function open(link) {
      return $window.open(link, '_system');
    }

    //====================================================
    //  LinkService.share Usage
    //====================================================
    // LinkService.share('my title', 'my content stuff', 'http://www.applicat.co.kr')
    // Output
    //Social Share title content and link
    function share(title, content, url) {
      return $cordovaSocialSharing
        .share(title, content, null, url)
        .then(function(suc) {
          console.log(suc);
        }, function(err) {
          console.log(err);
        });
    }
  }
})();

(function() {
    'use strict';
    angular.module('app')
        .factory('LocalService', function() {
            return {
                get: function(key) {
                    return localStorage.getItem(key);
                },
                set: function(key, val) {
                    return localStorage.setItem(key, val);
                },
                unset: function(key) {
                    return localStorage.removeItem(key);
                },
                getSession: function(key) {
                    return sessionStorage.getItem(key);
                },
                setSession: function(key, val) {
                    return sessionStorage.setItem(key, val);
                },
                unsetSession: function(key) {
                    return sessionStorage.removeItem(key);
                }
            }
        });


})();

(function() {
    'use strict';
    angular.module('app')
        .factory('Message', Message);

    Message.$inject = ['$ionicLoading', '$ionicPopup'];

    function Message($ionicLoading, $ionicPopup) {
        var service = {
            loading: loadingDefault,
            hide: loadingHide,
            success: messageSuccess,
            error: messageError,
            alert: popUpAlertDefault
        };

        return service;

        function loadingDefault(message) {
            $ionicLoading.show(message);
        }

        function messageSuccess(message) {
            $ionicLoading.show({
                template: '<h4 class="message-success">' + message + '</h4>',
                duration: 2000
            });
        }

        function messageError(message) {
            $ionicLoading.show({
                template: '<h4 class="message-error">' + message + '</h4>',
                duration: 2000
            });
        }

        function loadingHide() {
            $ionicLoading.hide();
        }

        function popUpAlertDefault(title, message) {
            return $ionicPopup.alert({
                title: title || '인터넷이 끊겼습니다.',
                template: message || '인터넷을 켜주세요.'
            });
        }


    }


})();

//====================================================
// createdBy;
// Seunghoon Ko (imskojs@gmail.com)
// Gush... I'm not goint to use preload... just look at those injected Models!!!
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('Preload', Preload);

  Preload.$inject = [
    'Products', 'Places', 'Bids', 'BidListPawnShopPendingModel', 'ProductUpdateModel',
    'BidDetailPawnShopPendingModel', 'BidListPawnShopRespondedModel',
    'ProductListModel', 'ProductDetailModel', 'PlaceDetailModel', 'BidDetailUserModel',
    'BidDetailPawnShopRespondedModel', 'FavoriteProductListModel', 'FavoriteProductDetailModel',
    'MyProductListUserModel', 'BidListUserModel', 'MyProductListPawnShopModel',
    'U', '$q', '$filter', '_', 'Message', 'appStorage', '$timeout'
  ];

  function Preload(
    Products, Places, Bids, BidListPawnShopPendingModel, ProductUpdateModel,
    BidDetailPawnShopPendingModel, BidListPawnShopRespondedModel,
    ProductListModel, ProductDetailModel, PlaceDetailModel, BidDetailUserModel,
    BidDetailPawnShopRespondedModel, FavoriteProductListModel, FavoriteProductDetailModel,
    MyProductListUserModel, BidListUserModel, MyProductListPawnShopModel,
    U, $q, $filter, _, Message, appStorage, $timeout) {

    var service = {
      photos: photos,
      stateWithProducts: stateWithProducts,
      stateWithPlaces: stateWithPlaces,
      stateWithBids: stateWithBids
    };

    return service;

    //====================================================
    //  Implementation
    //====================================================
    function photos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool) {
      var urls = getPhotos(arrayOfObjsWithPhotosArray, cloudinaryFilterName, onlyFirstOnesBool);
      var promises = [];
      angular.forEach(urls, function(url) {
        var deferred = $q.defer();
        var img = new Image();
        img.onload = onImageLoad(deferred);
        img.onerror = onImageError(deferred, url);
        promises.push(deferred.promise);
        img.src = url;
      });
      return $q.all(promises);
    }

    //====================================================
    //  Bids
    //====================================================
    function stateWithBids(state, params, moveToStateBool, navDirection) {
      Message.loading();
      console.log("---------- params.product ----------");
      console.log(params.product);
      console.log("HAS TYPE: " + typeof params.product);

      var promise;
      if (state === 'main.bidListUser') {
        promise = Bids.find({
          product: params.product,
          limit: 10,
          status: 'responded',
          sort: 'updatedAt DESC',
          populates: ['photos', 'owner', 'place', 'createdBy']
        }).$promise
          .then(function(bidsWrapper) {
            BidListUserModel.bids = bidsWrapper.bids;
            BidListUserModel.more = bidsWrapper.more;
            console.log(BidListUserModel.bids);
            return photos(BidListUserModel.bids, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.bidDetailUser') {
        promise = Bids.findOne({
          id: params.id,
          populates: ['photos', 'createdBy', 'owner']
        }).$promise
          .then(function(bid) {
            BidDetailUserModel.bid = bid;
            console.log("---------- BidDetailUserModel.bid ----------");
            console.log(BidDetailUserModel.bid);
            console.log("HAS TYPE: " + typeof BidDetailUserModel.bid);
            console.log("---------- CONSOLE END -------------------");

            return photos(BidDetailUserModel.bid, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.bidListPawnShopPending') {
        promise = Bids.find({
          owner: appStorage.place.owner,
          limit: 10,
          status: 'pending',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
          .then(function(bidsWrapper) {
            $timeout(function() {
              BidListPawnShopPendingModel.bids = bidsWrapper.bids;
              BidListPawnShopPendingModel.more = bidsWrapper.more;
              console.log(BidListPawnShopPendingModel.bids);
            }, 0);
            return photos(BidListPawnShopPendingModel.bids, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.bidDetailPawnShopPending') {
        promise = Bids.findOne({
          id: params.id,
          populates: ['photos', 'createdBy']
        }).$promise
          .then(function(bid) {
            BidDetailPawnShopPendingModel.bid = bid;
            console.log(BidDetailPawnShopPendingModel.bid);
            return photos(BidDetailPawnShopPendingModel.bid, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.bidListPawnShopResponded') {
        promise = Bids.find({
          owner: appStorage.place.owner,
          limit: 10,
          status: 'responded',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
          .then(function(bidsWrapper) {
            BidListPawnShopRespondedModel.bids = bidsWrapper.bids;
            BidListPawnShopRespondedModel.more = bidsWrapper.more;
            console.log(BidListPawnShopRespondedModel.bids);
            return photos(BidListPawnShopRespondedModel.bids, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.bidDetailPawnShopResponded') {
        promise = Bids.findOne({
          id: params.id,
          populates: ['photos', 'createdBy']
        }).$promise
          .then(function(bid) {
            BidDetailPawnShopRespondedModel.bid = bid;
            console.log(BidDetailPawnShopRespondedModel.bid);
            return photos(BidDetailPawnShopRespondedModel.bid, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      }
    } // stateWithBids Ends


    //====================================================
    //  Places
    //====================================================
    function stateWithPlaces(state, params, moveToStateBool, navDirection) {
      Message.loading();
      var promise;
      if (state === 'main.placeDetail') {
        promise = Places.getPlace({
          id: params.id,
          populates: ['photos']
        }).$promise
          .then(function(place) {
            PlaceDetailModel.place = place;
            console.log(PlaceDetailModel.place);
            return photos(PlaceDetailModel.place, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      }
    } // stateWithPlaces end

    //====================================================
    //  Products
    //====================================================
    function stateWithProducts(state, params, moveToStateBool, navDirection) {
      Message.loading();
      var query;
      var onData;
      var promise;
      //====================================================
      //  productList.market
      //====================================================
      if (state === 'main.productList.market') {
        query = {
          category: params.category,
          longitude: appStorage.geoJSON.coordinates[0],
          latitude: appStorage.geoJSON.coordinates[1],
          distance: appStorage.marketDistance,
          status: 'selling',
          limit: 10,
          populates: ['photos', 'place']
        };
        console.log("---------- query ----------");
        console.log(query);
        console.log("HAS TYPE: " + typeof query);

        if (appStorage.address === '전체보기') {
          console.log('전체보기');
          query.sort = {
            '_id': -1
          };
          query.distance = 999999;
        }
        onData = function(productsWrapper) {
          ProductListModel.market.products = productsWrapper.products;
          ProductListModel.market.more = productsWrapper.more;
          return photos(ProductListModel.market.products, 'cloudinary200', true);
        };
        promise = Products.getProductsWithin(query).$promise
          .then(onData);
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
        //====================================================
        // productList.pawnShop
        //====================================================
      } else if (state === 'main.productList.pawnShop') {
        query = {
          category: params.category,
          showBid: true,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        };
        onData = function(productsWrapper) {
          ProductListModel.pawnShop.products = productsWrapper.products;
          ProductListModel.pawnShop.more = productsWrapper.more;
          console.log(ProductListModel.pawnShop.products);
          return photos(ProductListModel.pawnShop.products, 'cloudinary200', true);
        };
        promise = Products.getProducts(query).$promise
          .then(onData);
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
        //====================================================
        // productList.placeId ==> main.placeId for nav reasons
        //====================================================
      } else if (state === 'main.placeId') {
        query = {
          place: params.id,
          category: params.category,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        };
        onData = function(productsWrapper) {
          ProductListModel.placeId.products = productsWrapper.products;
          ProductListModel.placeId.more = productsWrapper.more;
          return photos(ProductListModel.placeId.products, 'cloudinary200', true);
        };
        promise = Products.getProducts(query).$promise
          .then(onData);
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
        //====================================================
        //  productDetail.market
        //====================================================
      } else if (state === 'main.productDetail.market') {
        if (appStorage.user.lookAround) {
          Message.hide();
          return Message.alert('둘러보기 알림.', '로그인을 하셔야 보실수있는 내용입니다.');
        }
        query = {
          id: params.id,
          populates: ['photos', 'place']
        };
        onData = function(product) {
          ProductDetailModel.market.product = product;
          console.log("---------- product ----------");
          console.log(product);
          console.log("HAS TYPE: " + typeof product);

          console.log(ProductDetailModel.market.product);
          return photos(ProductDetailModel.market.product, 'cloudinary600', false);
        };
        promise = Products.getProduct(query).$promise
          .then(onData);
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.productDetail.pawnShop') {
        if (appStorage.user.lookAround) {
          Message.hide();
          return Message.alert('둘러보기 알림.', '로그인을 하셔야 보실수있는 내용입니다.');
        }
        promise = Products.getProduct({
          id: params.id,
          populates: ['photos', 'place', 'createdBy']
        }).$promise
          .then(function(product) {
            ProductDetailModel.pawnShop.product = product;
            return photos(ProductDetailModel.pawnShop.product, 'cloudinary600', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.myProductListUser') {
        promise = Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'pawnShop',
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        }).$promise
          .then(function(productsWrapper) {
            $timeout(function() {
              MyProductListUserModel.products = productsWrapper.products;
              MyProductListUserModel.more = productsWrapper.more;
            }, 0);
            return photos(MyProductListUserModel.products, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.myProductListPawnShop') {
        promise = Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'market',
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        }).$promise
          .then(function(productsWrapper) {
            MyProductListPawnShopModel.products = productsWrapper.products;
            MyProductListPawnShopModel.more = productsWrapper.more;
            return photos(MyProductListPawnShopModel.products, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.productUpdate.info') {
        promise = Products.getProduct({
          id: params.id,
          populates: ['photos']
        }).$promise
          .then(function(product) {
            product.price = Number(product.price);
            ProductUpdateModel.product = product;
            console.log(product);
            return photos(ProductUpdateModel.product, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.favoriteProductList') {
        var favoriteIds = appStorage.favorites;
        if (!favoriteIds || favoriteIds.length === 0) {
          favoriteIds = 'none';
        }
        promise = Products.getProducts({
          id: favoriteIds,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        }).$promise
          .then(function(productsWrapper) {
            FavoriteProductListModel.products = productsWrapper.products;
            FavoriteProductListModel.more = productsWrapper.more;
            return photos(FavoriteProductListModel.products, 'cloudinary200', true);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;
      } else if (state === 'main.favoriteProductDetail') {
        promise = Products.getProduct({
          id: params.id,
          populates: ['photos', 'place', 'createdBy']
        }).$promise
          .then(function(product) {
            FavoriteProductDetailModel.product = product;
            return photos(FavoriteProductDetailModel.product, 'cloudinary400', false);
          });
        if (moveToStateBool) {
          promise.then(function() {
            U.goToState(state, params, navDirection);
          });
        }
        return promise;

      }

    } // stateWithProducts Ends

    //====================================================
    //  Helper
    //====================================================
    function onImageLoad(deferred) {
      return function() {
        deferred.resolve();
      };
    }

    function onImageError(deferred, url) {
      return function() {
        deferred.reject(url);
      };
    }

    function getPhotos(posts, cloudinaryFilterName, onlyFirstOnesBool) {
      var preProcessedUrls = [];
      if (!Array.isArray(posts)) {
        posts = [posts];
      }
      var arrayOfUrls = _.pluck(posts, 'photos');
      angular.forEach(arrayOfUrls, function(photos) {
        var urls = _.pluck(photos, 'url');
        if (onlyFirstOnesBool) {
          var first = urls[0];
          urls = [first];
        }
        preProcessedUrls = preProcessedUrls.concat(urls);
      });
      var urls = _.map(preProcessedUrls, function(url) {
        return $filter(cloudinaryFilterName)(url);
      });
      urls = _.filter(urls, function(url) {
        return url != null;
      });
      return urls;
    }

  } // Service END
})();

//====================================================
//  createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================

// Description: Extends $rootScope with custom functions;

// Usage;
// In app.js
// .run(['$rootScope', 'rootScopeService', function ($rootScope, rootScopeService){
//   angular.extend($rootScope, rootScopeService);
// }])
(function() {
  'use strict';

  angular.module('app')
    .factory('rootScopeService', rootScopeService);

  rootScopeService.$inject = ['$state', '$stateParams', '$ionicHistory', '$ionicSideMenuDelegate', 'Message', '$timeout', 'appStorage', '$rootScope', '_', '$ionicModal', '$ionicViewSwitcher', 'devMode'];

  function rootScopeService($state, $stateParams, $ionicHistory, $ionicSideMenuDelegate, Message, $timeout, appStorage, $rootScope, _, $ionicModal, $ionicViewSwitcher, devMode) {
    var service = {
      appStorage: appStorage,
      $state: $state,
      $stateParams: $stateParams,
      isState: isState,
      areStates: areStates,
      getState: getState,
      isParam: isParam,
      hasParam: hasParam,
      getParam: getParam,
      goToState: goToState,
      goBack: goBack,
      loading: loading,
      toggleSideMenu: toggleSideMenu,
      closeSideMenu: closeSideMenu,
      comingSoon: comingSoon,
      devMode: devMode
    };

    $ionicModal.fromTemplateUrl('state/modal/requestLogin.html', {
      scope: $rootScope,
      animation: 'mh-slide'
    }).then(function(modal) {
      $rootScope.requestLoginModal = modal;
    });

    return service;

    function isState(state) {
      return state === $ionicHistory.currentStateName();
    }

    function areStates(states) {
      return states.indexOf($ionicHistory.currentStateName()) !== -1;
    }

    function getState() {
      return $ionicHistory.currentStateName();
    }
    //====================================================
    //  $rootScope.isParam({id: '123', category: ''}) >> true | false
    //====================================================
    function isParam(paramObj) {
      for (var key in paramObj) {
        if ($state.params[key] !== paramObj[key]) {
          return false;
        }
      }
      return true;
    }

    function hasParam(paramKey) {

      if ($state.params[paramKey] !== '') {
        return true;
      } else {
        return false;
      }
    }
    //====================================================
    // $rootScope.getParam(category)  >> $stateParams[category]
    //====================================================
    function getParam(key) {
      return $state.params[key];
    }
    //====================================================
    //  $rootScope.goToState('main.home', {category: 'apple', theme: 'drink'})
    //====================================================
    function goToState(state, params, direction, showSpinner) {
      if (showSpinner) {
        loading();
      }
      if (direction) {
        $ionicViewSwitcher.nextDirection(direction);
      }
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go(state, params);
    }
    //====================================================
    //  $rootScope.goBack();
    //====================================================
    function goBack(direction) {
      if (direction) {
        $ionicViewSwitcher.nextDirection(direction);
      }
      $ionicHistory.goBack();
    }
    //====================================================
    //  $rootScope.loading();
    //====================================================
    function loading() {
      Message.loading();
      $timeout(function() {
        Message.hide();
      }, 5000);
    }
    //====================================================
    //  $rootScope.closeSideMenu();
    //====================================================
    function closeSideMenu() {
      $ionicSideMenuDelegate.toggleLeft(false);
    }
    //====================================================
    //  $rootScope.toggleSideMenu();
    //====================================================
    function toggleSideMenu(requireLoggedIn) {
      if (requireLoggedIn) {
        if (!appStorage.token) {
          return Message.alert('둘러보기 알림', '로그인을 하셔야 볼수있는 내용입니다.');
        }
      }
      $ionicSideMenuDelegate.toggleLeft();
    }
    //====================================================
    //  $rootScope.comingSoon();
    //====================================================
    function comingSoon(title) {
      return Message.alert(title + ' 준비중인 서비스입니다.', '빠른시일내에 준비완료하겠습니다.');
    }


  } //end
})();

//====================================================
// createdBy;
// Seunghoon Ko (imskojs@gmail.com)
//====================================================
(function() {
  'use strict';

  angular.module('app')
    .factory('U', U);

  U.$inject = [
    '$ionicHistory', '$ionicScrollDelegate', '$timeout', '_', '$filter',
    'ImagePreload', 'Message', '$ionicSideMenuDelegate', '$state',
    '$ionicViewSwitcher', '$ionicSlideBoxDelegate'
  ];

  function U(
    $ionicHistory, $ionicScrollDelegate, $timeout, _, $filter,
    ImagePreload, Message, $ionicSideMenuDelegate, $state,
    $ionicViewSwitcher, $ionicSlideBoxDelegate
  ) {

    var service = {
      isForwardView: isForwardView,
      isBackView: isBackView,
      isSiblingView: isSiblingView,
      areSiblingViews: areSiblingViews,
      resize: resize,
      update: update,
      resetSlides: resetSlides,
      reset: reset,
      goToState: goToState,
      goBack: goBack,
      error: error,
      bindData: bindData,
      appendData: appendData,
      broadcast: broadcast
    };

    return service;

    function isForwardView(stateName) {
      console.log($ionicHistory.viewHistory());
      var isView =
        $ionicHistory.viewHistory().forwardView &&
        $ionicHistory.viewHistory().forwardView.stateName === stateName;
      return isView;
    }

    function isBackView(stateName) {
      console.log($ionicHistory.viewHistory());
      var isView =
        $ionicHistory.viewHistory().backView &&
        $ionicHistory.viewHistory().backView.stateName === stateName;
      return isView;
    }

    function isSiblingView(stateName) {
      return isForwardView(stateName) || isBackView(stateName);
    }

    function areSiblingViews(stateNames) {
      var i;
      var stateName;
      for (i = 0; i < stateNames.length; i++) {
        stateName = stateNames[i];
        if (isSiblingView(stateName)) {
          return true;
        }
      }
      return false;
    }

    function resize() {
      $timeout(function() {
        $ionicScrollDelegate.resize();
      }, 0);
    }

    function update() {
      $timeout(function() {
        $ionicSlideBoxDelegate.update();
      }, 0);
    }

    function resetSlides() {
      $ionicSlideBoxDelegate.slide(0, 0);
      $ionicSlideBoxDelegate.update();
    }

    function reset(model) {
      for (var key in model) {
        if (Array.isArray(model[key])) {
          model[key] = [];
        } else if (model[key] !== null && typeof model[key] === 'object') {
          model[key] = {};
        } else if (typeof model[key] === 'boolean') {
          model[key] = false;
        } else {
          model[key] = null;
        }
      }
    }

    function goToState(state, params, direction) {
      Message.hide();
      $timeout(function() {
        if (direction) {
          $ionicViewSwitcher.nextDirection(direction);
        }
        $state.go(state, params);
        $ionicSideMenuDelegate.toggleLeft(false);
      }, 0);
    }

    function goBack(direction) {
      if (direction) {
        $ionicViewSwitcher.nextDirection(direction);
      }
      $ionicHistory.goBack();
    }

    function error(err) {
      Message.hide();
      Message.alert();
      console.log(err);
    }

    function bindData(data, model, name) {
      // if data is a dataWrapper
      if (name[name.length - 1] === 's') {
        model[name] = data[name];
        model.more = data.more;
        // if data is a data
      } else {
        model[name] = data;
      }
      resize();
      $timeout(function() {
        model.loading = false;
      }, 50);
    }

    function appendData(dataWrapper, model, name) {
      if (name[name.length - 1] === 's') {
        angular.forEach(dataWrapper[name], function(item) {
          model[name].push(item);
        });
        model.more = dataWrapper.more;
        resize();
        // if data is a data
      } else {
        console.error('no dataWrapper.data perhaps dataWrapper is data.');
      }
    }

    function broadcast($scope) {
      $scope.$broadcast('scroll.refreshComplete');
      $scope.$broadcast('scroll.infiniteScrollComplete');
    }

  } // Service END
})();

// Fixes the case where parent veritcal scrolling is disabled on ion-scroll
// element.

// Usage
// ion-scroll[direction="x" scroll-parent]
(function() {
    'use strict';

    angular.module('app')
        .directive('parentScroll', parentScroll);

    parentScroll.$inject = ['$ionicScrollDelegate', '$timeout', '$window', '$document'];

    function parentScroll($ionicScrollDelegate, $timeout, $window, $document) {
        return {
            scope: true,
            restrict: 'A',
            compile: compile
        };

        function compile(element, attr) {

            if (!$window.horizontalIonScrollCount) {
                $window.horizontalIonScrollCount = 0;
            }

            $window.horizontalIonScrollCount++;
            attr.delegateHandle = "horizontal" + $window.horizontalIonScrollCount;

            return function(scope, element, attr) {
                $timeout(function() {
                    var horizontal = attr.delegateHandle;
                    var sv = $ionicScrollDelegate.$getByHandle(horizontal).getScrollView();

                    var container = sv.__container;

                    var originaltouchStart = sv.touchStart;
                    var originalmouseDown = sv.mouseDown;
                    var originaltouchMove = sv.touchMove;
                    var originalmouseMove = sv.mouseMove;

                    container.removeEventListener('touchstart', sv.touchStart);
                    container.removeEventListener('mousedown', sv.mouseDown);
                    $document.removeEventListener('touchmove', sv.touchMove);
                    $document.removeEventListener('mousemove', sv.mousemove);


                    sv.touchStart = function(e) {
                        e.preventDefault = function() {};
                        originaltouchStart.apply(sv, [e]);
                    };

                    sv.touchMove = function(e) {
                        e.preventDefault = function() {};
                        originaltouchMove.apply(sv, [e]);
                    };

                    sv.mouseDown = function(e) {
                        e.preventDefault = function() {};

                        if (originalmouseDown) {
                            originalmouseDown.apply(sv, [e]);
                        }

                    };


                    sv.mouseMove = function(e) {
                        e.preventDefault = function() {};

                        if (originalmouseMove) {
                            originalmouseMove.apply(sv, [e]);
                        }

                    };

                    container.addEventListener("touchstart", sv.touchStart, false);
                    container.addEventListener("mousedown", sv.mouseDown, false);
                    $document.addEventListener("touchmove", sv.touchMove, false);
                    $document.addEventListener("mousemove", sv.mouseMove, false);
                });

            };
        }
    }
})();

// Makes width of the view available as JS or directive such as collection repeat
// This makes collection repeat to have dynamic width or height which depends on
//the view width or view height;

// usage:
// In index.html, body[loading]
// 1) ion-list>ion-item[collection-repeat="item in items" item-height="loading * 0.20"]
// 2) ANY[loading]
// 3) function controller($rootScope){
//     console.log($rootScope.loading);
//    }
(function() {
  'use strict';

  angular.module('app')
    .directive('loading', loading);

  loading.$inject = [];

  function loading() {
    return {
      replace: true,
      template: '<div class="w100p h100vh flex light-grey-bg absolute"style="z-index: 2">' +
        '<ion-spinner class="spinner-40px mb88px" icon="ripple"></ion-spinner>' +
        '</div>'
    };
  }


})();

(function() {
  'use strict';
  angular.module('app')
    .directive('ngEnter', function() {
      return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
          if (event.which === 13) {
            scope.$apply(function() {
              scope.$eval(attrs.ngEnter);
            });

            event.preventDefault();
          }
        });
      };
    });
})();

(function() {
    'use strict';

    angular.module('app')
        .directive('onFinishRender', onFinishRender);

    onFinishRender.$inject = ['$timeout'];

    function onFinishRender($timeout) {
        return {
            restrict: 'A',
            link: link
        };

        function link(scope) {
            if (scope.$last === true) {
                $timeout(function() {
                    scope.$emit('ngRepeatFinished');
                });
            }
        }
    }
})();

//==========================================================================
//              Style for user selection.
//==========================================================================

(function() {
    'use strict';

    angular.module('app')
        .directive('touch', touch);

    touch.$inject = ['$timeout'];

    function touch($timeout) {
        return {
            restrict: 'A',
            link: link
        };

        function link(scope, element) {
            element.on('click', function() {
                element.addClass('touch');
                $timeout(function() {
                    element.removeClass('touch');
                }, 50);

            });
        }
    }

})();

// Makes width of the view available as JS or directive such as collection repeat
// This makes collection repeat to have dynamic width or height which depends on
//the view width or view height;

// usage:
// In index.html, body[vw]
// 1) ion-list>ion-item[collection-repeat="item in items" item-height="vw * 0.20"]
// 2) ANY[vw]
// 3) function controller($rootScope){
//     console.log($rootScope.vw);
//    }
(function() {
  'use strict';

  angular.module('app')
    .directive('vw', vw);

  vw.$inject = ['$rootScope', '$window'];

  function vw($rootScope, $window) {
    return {
      link: link
    };

    function link(scope, element) {
      $rootScope.vw = element.prop('offsetWidth');

      $window.addEventListener('resize', function() {
        $rootScope.$apply(function() {
          $rootScope.vw = element.prop('offsetWidth');
        });
      });
    }
  }


})();

(function() {
  'use strict';
  angular.module('app')
    .filter('appText', appText);

  appText.$inject = [];

  function appText() {
    return function(input) {
      if (input === 'faq') {
        return '자주 묻는 질문';
      } else if (input === 'notification') {
        return '공지사항';
      } else if (input === 'high') {
        return '상';
      } else if (input === 'medium') {
        return '중';
      } else if (input === 'low') {
        return '하';
      } else if (input === 'selling') {
        return '판매중';
      } else if (input === 'sold') {
        return '판매완료';
      }
    };
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .filter('cloudinary800', cloudinaryFilter.bind(null, 800))
    .filter('cloudinary750', cloudinaryFilter.bind(null, 750))
    .filter('cloudinary700', cloudinaryFilter.bind(null, 700))
    .filter('cloudinary650', cloudinaryFilter.bind(null, 650))
    .filter('cloudinary600', cloudinaryFilter.bind(null, 600))
    .filter('cloudinary550', cloudinaryFilter.bind(null, 550))
    .filter('cloudinary500', cloudinaryFilter.bind(null, 500))
    .filter('cloudinary450', cloudinaryFilter.bind(null, 450))
    .filter('cloudinary400', cloudinaryFilter.bind(null, 400))
    .filter('cloudinary350', cloudinaryFilter.bind(null, 350))
    .filter('cloudinary300', cloudinaryFilter.bind(null, 300))
    .filter('cloudinary250', cloudinaryFilter.bind(null, 250))
    .filter('cloudinary200', cloudinaryFilter.bind(null, 200))
    .filter('cloudinary150', cloudinaryFilter.bind(null, 150))
    .filter('cloudinary100', cloudinaryFilter.bind(null, 100))
    .filter('cloudinary50', cloudinaryFilter.bind(null, 50));

  function cloudinaryFilter(size) {
    var matching = /upload/;
    return function(input) {
      if (input) {
        var index = input.search(matching);
        if (index !== -1) {
          return input.substring(0, index) + 'upload/c_scale,w_' + size + '/' + input.substring(input.lastIndexOf('/'));
        } else {
          return input;
        }
      } else if (input == null) {
        return null;
      } else {
        return input;
      }
    };
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .filter('mToKm', mToKm);

  // distance.$inject=[];

  function mToKm() {
    return function(input) {
      if (input >= 1000) {
        return (input / 1000).toFixed(2) + ' km';
      } else if (input === undefined) {
        return '0 m';
      } else {
        return input + ' m';
      }
    };
  }
})();

// Input
// vm.openingHours = [{start: "07:00", end: "20:20"}, ..., {start: "08:00", end: "18:00"} ]

// Usage
// div{vm.openingHours | groupByOpeningHours}

// Output
// ["월~목 07:00 ~ 20:20", "금~토 08:00 ~ 16:00", "일요일 휴무"]

(function() {
  'use strict';

  angular.module('app')
    .filter('groupByOpeningHours', groupByOpeningHours);

  groupByOpeningHours.$inject = ['_'];

  function groupByOpeningHours(_) {
    return filter;

    function filter(openingHours) {
      // append index to object
      if (!openingHours) {
        return ['업데이트 해주세요'];
      }
      openingHours = appendIndexToObj(openingHours);
      // group by same hours
      var grouped = groupByBusinessHours(openingHours);
      // create [{days: [0, 1], start: "08:00", end: "20:00"},...}
      var orderedResultArray = createArrayOfObjWithGroup(grouped);
      // create ["월 ~ 금" 08:00 ~ 03:00", "일요일 휴무"]
      var textArray = _.map(orderedResultArray, function(result) {
        // result = {days:[0,1], start: '', end: ''};
        result.days = _.map(result.days, function(day) {
          var daysKorean = parseDay(day);
          return daysKorean;
        });
        result.days = tildeArrayValuesToText(result.days);
        var apendTime = '';
        if (result.start === result.end) {
          apendTime = '휴무';
        } else {
          apendTime = result.start + ' ~ ' + result.end;
        }
        var texts = result.days + ' ' + apendTime;
        return texts;
      });

      return textArray;
    }


    function appendIndexToObj(openingHours) {
      for (var i = 0; i < openingHours.length; i++) {
        openingHours[i].index = i;
      }
      return openingHours;
    }

    function groupByBusinessHours(openingHours) {
      var grouped = _.groupBy(openingHours, function(hoursObj) {
        var start = hoursObj.start;
        var end = hoursObj.end;
        var groupCategory = start + end;
        return groupCategory;
      });
      return grouped;
    }

    function createArrayOfObjWithGroup(grouped) {
      // grouped = ['1212': [{start:'', end:'', index: 0}, ...]]
      // out = [{days:[0,1], start:'',  end:''}, ...]
      var keys = Object.keys(grouped);

      var resultArray = [];
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var subOpeningHoursArray = grouped[key];

        var daysResult = [];
        for (var j = 0; j < subOpeningHoursArray.length; j++) {
          var openingHourObj = subOpeningHoursArray[j];
          daysResult.push(openingHourObj.index);
        }

        var start = subOpeningHoursArray[0].start;
        var end = subOpeningHoursArray[0].end;

        resultArray.push({
          days: daysResult,
          start: start,
          end: end
        });
      }

      var orderedResultArray = _.sortBy(resultArray, function(obj) {
        var day = obj.days[0];
        if (day === 0) {
          day = 7;
        }
        return day;
      });

      return orderedResultArray;
    }

    function parseDay(day) {
      if (day === 0) {
        return '일';
      } else if (day === 1) {
        return '월';
      } else if (day === 2) {
        return '화';
      } else if (day === 3) {
        return '수';
      } else if (day === 4) {
        return '목';
      } else if (day === 5) {
        return '금';
      } else if (day === 6) {
        return '토';
      }
    }

    function tildeArrayValuesToText(array) {
      var daysInNumbers = _.map(array, function(dayInKorean) {
        if (dayInKorean === '일요일') {
          return 7;
        } else if (dayInKorean === '월') {
          return 1;
        } else if (dayInKorean === '화') {
          return 2;
        } else if (dayInKorean === '수') {
          return 3;
        } else if (dayInKorean === '목') {
          return 4;
        } else if (dayInKorean === '금') {
          return 5;
        } else if (dayInKorean === '토') {
          return 6;
        }
      });
      for (var i = 0; i < daysInNumbers.length - 1; i++) {
        var day_1 = daysInNumbers[i];
        var day_2 = daysInNumbers[i + 1];
        if (Math.abs(day_1 - day_2) > 1) {
          var concatStart = array[0];
          for (var j = 1; j < daysInNumbers.length; j++) {
            concatStart = concatStart + ', ' + array[j];
          }
          return concatStart;
        }
      }
      if (array.length > 2) {
        return array[0] + ' ~ ' + array[array.length - 1];
      } else if (array.length === 2) {
        return array[0] + ', ' + array[1];
      } else if (array.length === 1) {
        return array[0];
      }
    }
  }

})();

//====================================================
//  createdBy;
// Seunghoon Ko
//====================================================
// Usage (in controller)
//var filterByTag = $filter('filterByTag');
//var out = filterByTag([1,2,3,4,1,2], 1);

// Out
//[1,1]
(function() {
  'use strict';
  angular.module('app')
    .filter('filterByTag', filterByTag);

  // filterByTag.$inject = [];
  function filterByTag() {

    return filter;

    function filter(collection, tagName) {
      var resultArray = [];
      if (collection) {
        for (var i = 0; i < collection.length; i++) {
          var element = collection[i];
          for (var j = 0; j < element.tags.length; j++) {
            var tag = element.tags[j];
            if (tag === tagName) {
              resultArray.push(element);
            }
          }
        }
      }
      return resultArray;
    }
  }


})();

(function() {
  'use strict';
  angular.module('app')
    .filter('stateParamToText', stateParamToText);

  stateParamToText.$inject = [];

  function stateParamToText() {
    return function(param) {
      if (param === 'faq') {
        return '자주 묻는 질문';
      } else if (param === 'notification') {
        return '공지사항';
      }
    };
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidDetailUserController', BidDetailUserController);

  BidDetailUserController.$inject = ['BidDetailUserModel'];

  function BidDetailUserController(BidDetailUserModel) {

    var BidDetailUser = this;
    BidDetailUser.Model = BidDetailUserModel;

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidDetailUserModel', BidDetailUserModel);

  BidDetailUserModel.$inject = [];

  function BidDetailUserModel() {

    var model = {
      bid: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidListUserController', BidListUserController);

  BidListUserController.$inject = ['$scope', 'Bids', 'BidListUserModel', 'Preload', 'U', '$state', 'appStorage', 'Distance'];

  function BidListUserController($scope, Bids, BidListUserModel, Preload, U, $state, appStorage, Distance) {

    var BidListUser = this;
    BidListUser.Model = BidListUserModel;

    BidListUser.refreshBids = refreshBids;
    BidListUser.preloadToBidDetailUser = preloadToBidDetailUser;
    BidListUser.getOlderBids = getOlderBids;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);

    function refreshBids() {
      return Bids.find({
          product: $state.params.product,
          limit: 10,
          sort: 'updatedAt DESC',
          status: 'responded',
          populates: ['photos', 'owner', 'place', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          BidListUserModel.bids = bidsWrapper.bids;
          BidListUserModel.more = bidsWrapper.more;
          var currentLocation = {
            longitude: appStorage.geoJSON.coordinates[0],
            latitude: appStorage.geoJSON.coordinates[1]
          };
          angular.forEach(BidListUserModel.bids, function(bid) {
            var placeLocation = {
              longitude: bid.place.geoJSON.coordinates[0],
              latitude: bid.place.geoJSON.coordinates[1]
            };
            bid.distanceFromCurrent = Distance.between(currentLocation, placeLocation);
          });
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
          U.resize();
        });
    }

    function preloadToBidDetailUser(bid) {
      return Preload.stateWithBids('main.bidDetailUser', {
          id: bid.id
        }, true, 'forward')
        .catch(U.error);
    }

    function getOlderBids() {
      var last = BidListUserModel.bids.length - 1;
      return Bids.find({
          dateOlderThan: BidListUserModel.bids[last].updatedAt,
          product: $state.params.product,
          limit: 10,
          status: 'responded',
          sort: 'updatedAt DESC',
          populates: ['photos', 'owner', 'place', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          angular.forEach(bidsWrapper.bids, function(bid) {
            BidListUserModel.bids.push(bid);
          });
          BidListUserModel.more = bidsWrapper.more;
          var currentLocation = {
            longitude: appStorage.geoJSON.coordinates[0],
            latitude: appStorage.geoJSON.coordinates[1]
          };
          angular.forEach(BidListUserModel.bids, function(bid) {
            var placeLocation = {
              longitude: bid.place.geoJSON.coordinates[0],
              latitude: bid.place.geoJSON.coordinates[1]
            };
            bid.distanceFromCurrent = Distance.between(currentLocation, placeLocation);
          });
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
          U.resize();
        });
    }

    function onBeforeEnter() {
      var currentLocation = {
        longitude: appStorage.geoJSON.coordinates[0],
        latitude: appStorage.geoJSON.coordinates[1]
      };
      angular.forEach(BidListUserModel.bids, function(bid) {
        var placeLocation = {
          longitude: bid.place.geoJSON.coordinates[0],
          latitude: bid.place.geoJSON.coordinates[1]
        };
        bid.distanceFromCurrent = Distance.between(currentLocation, placeLocation);
      });
      U.resize();
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidListUserModel', BidListUserModel);

  BidListUserModel.$inject = [];

  function BidListUserModel() {

    var model = {
      bids: []
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MyProductListPawnShopController', MyProductListPawnShopController);

  MyProductListPawnShopController.$inject = [
    'MyProductListPawnShopModel', 'Products',
    'appStorage', '$ionicModal', '$scope', 'U', 'Preload', 'Message'
  ];

  function MyProductListPawnShopController(
    MyProductListPawnShopModel, Products,
    appStorage, $ionicModal, $scope, U, Preload, Message
  ) {

    var MyProductListPawnShop = this;
    MyProductListPawnShop.Model = MyProductListPawnShopModel;

    MyProductListPawnShop.refreshProducts = refreshProducts;
    MyProductListPawnShop.getOlderProducts = getOlderProducts;

    MyProductListPawnShop.deleteProduct = deleteProduct;
    MyProductListPawnShop.preloadToBidListUser = preloadToBidListUser;
    MyProductListPawnShop.preloadToProductUpdateInfo = preloadToProductUpdateInfo;
    MyProductListPawnShop.showChangeStateModal = showChangeStateModal;
    MyProductListPawnShop.changeState = changeState;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });
    //====================================================
    //  Implementation
    //====================================================
    function preloadToProductUpdateInfo(product) {
      Preload.stateWithProducts('main.productUpdate.info', {
        category: 'pawnShop',
        method: 'update',
        section: 'info',
        step: 1,
        id: product.id
      }, true, 'forward')
        .catch(U.error);
    }

    function refreshProducts() {
      return Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'market',
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        }).$promise
        .then(function(productsWrapper) {
          MyProductListPawnShopModel.products = productsWrapper.products;
          MyProductListPawnShopModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
        });
    }

    function getOlderProducts() {
      var last = MyProductListPawnShopModel.products.length - 1;
      return Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'market',
          limit: 10,
          olderThan: MyProductListPawnShopModel.products[last].id,
          populates: ['photos']
        }).$promise
        .then(function(productsWrapper) {
          angular.forEach(productsWrapper.products, function(product) {
            MyProductListPawnShopModel.products.push(product);
          });
          MyProductListPawnShopModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    }

    function deleteProduct(product, $index) {
      Products.destroy({
        id: product.id
      }).$promise
        .then(function(product) {
          console.log(product);
          MyProductListPawnShopModel.products.splice($index, 1);
          U.resize();
        })
        .catch(U.error);
    }

    function preloadToBidListUser(product) {
      Preload.stateWithBids('main.bidListUser', {
        productId: product.id
      }, true)
        .catch(U.error);
    }

    function changeState(state) {
      Products.updateProduct({}, {
        id: MyProductListPawnShopModel.selectedProduct.id,
        status: state
      }).$promise
        .then(function(products) {
          MyProductListPawnShopModel.selectedProduct.status = products[0].status;
          refreshProducts();
          MyProductListPawnShop.changeStateModal.hide();
        })
        .catch(function(err) {
          MyProductListPawnShop.changeStateModal.hide();
          Message.alert();
        });
    }

    function showChangeStateModal(product) {
      MyProductListPawnShopModel.selectedProduct = product;
      MyProductListPawnShop.changeStateModal.show();
    }
    //====================================================
    //  Modals
    //====================================================
    $ionicModal.fromTemplateUrl('state/10myProductList/modal/changeStateModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      MyProductListPawnShop.changeStateModal = modal;
    });

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MyProductListPawnShopModel', MyProductListPawnShopModel);

  MyProductListPawnShopModel.$inject = [];

  function MyProductListPawnShopModel() {

    var model = {
      products: [],
      more: false,
      selectedProduct: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MyProductListUserController', MyProductListUserController);

  MyProductListUserController.$inject = [
    'MyProductListUserModel', 'Products',
    'appStorage', '$ionicModal', '$scope', 'U', 'Preload'
  ];

  function MyProductListUserController(
    MyProductListUserModel, Products,
    appStorage, $ionicModal, $scope, U, Preload
  ) {

    var MyProductListUser = this;
    MyProductListUser.Model = MyProductListUserModel;

    MyProductListUser.refreshProducts = refreshProducts;
    MyProductListUser.getOlderProducts = getOlderProducts;

    MyProductListUser.deleteProduct = deleteProduct;
    MyProductListUser.preloadToBidListUser = preloadToBidListUser;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });
    //====================================================
    //  Implementation
    //====================================================
    function refreshProducts() {
      return Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'pawnShop',
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        }).$promise
        .then(function(productsWrapper) {
          MyProductListUserModel.products = productsWrapper.products;
          MyProductListUserModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
        });
    }

    function getOlderProducts() {
      var last = MyProductListUserModel.products.length - 1;
      return Products.getProducts({
          createdBy: appStorage.user.id,
          category: 'pawnShop',
          limit: 10,
          olderThan: MyProductListUserModel.products[last].id,
          populates: ['photos']
        }).$promise
        .then(function(productsWrapper) {
          angular.forEach(productsWrapper.products, function(product) {
            MyProductListUserModel.products.push(product);
          });
          MyProductListUserModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    }

    function deleteProduct(product, $index) {
      Products.destroy({
        id: product.id
      }).$promise
        .then(function(product) {
          console.log(product);
          MyProductListUserModel.products.splice($index, 1);
          U.resize();
        })
        .catch(U.error);
    }

    function preloadToBidListUser(product) {
      Preload.stateWithBids('main.bidListUser', {
        product: product.id
      }, true)
        .catch(U.error);
    }
    //====================================================
    //  Modals
    //====================================================
    $ionicModal.fromTemplateUrl('state/10myProductList/modal/changeStateModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      MyProductListUser.changeStateModal = modal;
    });

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MyProductListUserModel', MyProductListUserModel);

  MyProductListUserModel.$inject = [];

  function MyProductListUserModel() {

    var model = {
      products: [],
      more: false,
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProductUpdateInfoController', ProductUpdateInfoController);

  ProductUpdateInfoController.$inject = ['ProductUpdateModel', 'Message', 'U', '$scope'];

  function ProductUpdateInfoController(ProductUpdateModel, Message, U, $scope) {

    var ProductUpdateInfo = this;
    ProductUpdateInfo.Model = ProductUpdateModel;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });


  } //end
})();


(function() {
  'use strict';
  angular.module('app')
    .controller('ProductUpdatePhotoController', ProductUpdatePhotoController);

  ProductUpdatePhotoController.$inject = ['ProductUpdateModel', 'Message', 'U', '$scope'];

  function ProductUpdatePhotoController(ProductUpdateModel, Message, U, $scope) {

    var ProductUpdatePhoto = this;
    ProductUpdatePhoto.Model = ProductUpdateModel;

    ProductUpdatePhoto.getImage = getImage;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });
    //====================================================
    //  Implementation
    //====================================================
    function getImage(length, sourceType) {
      if (validateImage(length)) {
        ImageService.get({
          from: sourceType,
          fileUris: ProductUpdateModel.fileUris,
          dataUris: ProductUpdateModel.dataUris,
        });
      }
    }

    function validateImage(length) {
      var alert = Message.alert.bind(null, '사진등록 알림');
      if (length !== 1 && !ProductUpdateModel.dataUris[length - 2]) {
        if (length === 2) {
          alert('전면사진을 먼저 등록해주세요.');
          return false;
        } else if (length === 3) {
          alert('측면사진을 먼저 등록해주세요.');
          return false;
        } else if (length === 4) {
          alert('일련번호(태그)를 먼저 등록해주세요.');
          return false;
        } else if (length === 5) {
          alert('부속품 전체를 먼저 등록해주세요.');
          return false;
        }
      }
      return true;
    }

  } //end
})();


(function() {
  'use strict';
  angular.module('app')
    .controller('BidDetailPawnShopPendingController', BidDetailPawnShopPendingController);

  BidDetailPawnShopPendingController.$inject = ['BidDetailPawnShopPendingModel', 'Bids', '$state', 'U', 'Message', 'Preload'];

  function BidDetailPawnShopPendingController(BidDetailPawnShopPendingModel, Bids, $state, U, Message, Preload) {

    var BidDetailPawnShopPending = this;
    BidDetailPawnShopPending.Model = BidDetailPawnShopPendingModel;

    BidDetailPawnShopPending.updateBid = updateBid;

    function updateBid() {
      Message.loading();
      var query = {};
      angular.extend(query, BidDetailPawnShopPendingModel.form);
      query.id = $state.params.id;
      query.status = 'responded';

      return Bids
        .update({}, query)
        .$promise
        .then(function(bid) {
          console.log(bid);
          return Preload.stateWithBids('main.bidListPawnShopResponded', {
            category: 'pawnShop',
            status: 'responded'
          }, false);
        })
        .then(function() {
          Message.hide();
          return Message.alert('견적보내기 알림', '견적을 성공적으로 보냈습니다.');
        })
        .then(function() {
          U.goToState('main.bidListPawnShopResponded', {
            category: 'pawnShop',
            status: 'responded'
          }, 'forward');

        })
        .catch(U.error);
    }


  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidDetailPawnShopPendingModel', BidDetailPawnShopPendingModel);

  BidDetailPawnShopPendingModel.$inject = [];

  function BidDetailPawnShopPendingModel() {

    var model = {
      bid: {},
      form: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidDetailPawnShopRespondedController', BidDetailPawnShopRespondedController);

  BidDetailPawnShopRespondedController.$inject = ['BidDetailPawnShopRespondedModel'];

  function BidDetailPawnShopRespondedController(BidDetailPawnShopRespondedModel) {

    var BidDetailPawnShopResponded = this;
    BidDetailPawnShopResponded.Model = BidDetailPawnShopRespondedModel;

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidDetailPawnShopRespondedModel', BidDetailPawnShopRespondedModel);

  BidDetailPawnShopRespondedModel.$inject = [];

  function BidDetailPawnShopRespondedModel() {

    var model = {
      bid: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidListPawnShopPendingController', BidListPawnShopPendingController);

  BidListPawnShopPendingController.$inject = ['BidListPawnShopPendingModel', 'Bids', 'appStorage', 'U', 'Preload', '$scope'];

  function BidListPawnShopPendingController(BidListPawnShopPendingModel, Bids, appStorage, U, Preload, $scope) {

    var BidListPawnShopPending = this;
    BidListPawnShopPending.Model = BidListPawnShopPendingModel;

    BidListPawnShopPending.refreshBids = refreshBids;
    BidListPawnShopPending.getOlderBids = getOlderBids;
    BidListPawnShopPending.deleteBid = deleteBid;
    BidListPawnShopPending.preloadToBidDetailPawnShopPending = preloadToBidDetailPawnShopPending;


    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });

    function refreshBids() {
      return Bids.find({
          owner: appStorage.place.owner,
          limit: 10,
          status: 'pending',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          BidListPawnShopPendingModel.bids = bidsWrapper.bids;
          BidListPawnShopPendingModel.more = bidsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
          U.resize();
        });
    }

    function preloadToBidDetailPawnShopPending(bid) {
      Preload.stateWithBids('main.bidDetailPawnShopPending', {
        id: bid.id
      }, true, 'foward')
        .catch(U.error);
    }

    function deleteBid(bid, $index) {
      return Bids.destroy({
          id: bid.id
        }).$promise
        .then(function(bid) {
          console.log(bid);
          BidListPawnShopPendingModel.bids.splice($index, 1);
          U.resize();
        })
        .catch(U.error)
        .finally(function() {
          U.resize();
        });
    }

    function getOlderBids() {
      var last = BidListPawnShopPendingModel.bids.length - 1;
      return Bids.find({
          olderThan: BidListPawnShopPendingModel.bids[last].id,
          owner: appStorage.place.owner,
          limit: 10,
          status: 'pending',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          angular.forEach(bidsWrapper.bids, function(bid) {
            BidListPawnShopPendingModel.bids.push(bid);
          });
          BidListPawnShopPendingModel.more = bidsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
          U.resize();
        });

    }
  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidListPawnShopPendingModel', BidListPawnShopPendingModel);

  BidListPawnShopPendingModel.$inject = [];

  function BidListPawnShopPendingModel() {

    var model = {
      bids: [],
      more: false
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidListPawnShopRespondedController', BidListPawnShopRespondedController);

  BidListPawnShopRespondedController.$inject = ['BidListPawnShopRespondedModel', 'Bids', 'appStorage', 'U', 'Preload', '$scope'];

  function BidListPawnShopRespondedController(BidListPawnShopRespondedModel, Bids, appStorage, U, Preload, $scope) {

    var BidListPawnShopResponded = this;
    BidListPawnShopResponded.Model = BidListPawnShopRespondedModel;

    BidListPawnShopResponded.refreshBids = refreshBids;
    BidListPawnShopResponded.getOlderBids = getOlderBids;
    BidListPawnShopResponded.deleteBid = deleteBid;
    BidListPawnShopResponded.preloadToBidDetailPawnShopResponded = preloadToBidDetailPawnShopResponded;


    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });


    function refreshBids() {
      return Bids.find({
          owner: appStorage.place.owner,
          limit: 10,
          status: 'responded',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          BidListPawnShopRespondedModel.bids = bidsWrapper.bids;
          BidListPawnShopRespondedModel.more = bidsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
          U.resize();
        });
    }

    function preloadToBidDetailPawnShopResponded(bid) {
      Preload.stateWithBids('main.bidDetailPawnShopResponded', {
        id: bid.id
      }, true, 'forward')
        .catch(U.error);
    }

    function deleteBid(bid, $index) {
      return Bids.destroy({
          id: bid.id
        }).$promise
        .then(function(bid) {
          console.log(bid);
          BidListPawnShopRespondedModel.bids.splice($index, 1);
          U.resize();
        })
        .catch(U.error)
        .finally(function() {
          U.resize();
        });
    }

    function getOlderBids() {
      var last = BidListPawnShopRespondedModel.bids.length - 1;
      return Bids.find({
          olderThan: BidListPawnShopRespondedModel.bids[last].id,
          owner: appStorage.place.owner,
          limit: 10,
          status: 'pending',
          sort: 'id DESC',
          populates: ['photos', 'createdBy']
        }).$promise
        .then(function(bidsWrapper) {
          angular.forEach(bidsWrapper.bids, function(bid) {
            BidListPawnShopRespondedModel.bids.push(bid);
          });
          BidListPawnShopRespondedModel.more = bidsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
          U.resize();
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidListPawnShopRespondedModel', BidListPawnShopRespondedModel);

  BidListPawnShopRespondedModel.$inject = [];

  function BidListPawnShopRespondedModel() {

    var model = {
      bids: [],
      more: false

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('MainController', MainController);

  MainController.$inject = [
    'Products', 'MainModel', '$scope', 'appStorage', '$state',
    '$ionicSideMenuDelegate', '$ionicModal', '$stateParams',
    'Message', 'U', 'AppService', 'Preload', '$localStorage', 'appName'
  ];

  function MainController(
    Products, MainModel, $scope, appStorage, $state,
    $ionicSideMenuDelegate, $ionicModal, $stateParams,
    Message, U, AppService, Preload, $localStorage, appName
  ) {

    var Main = this;
    Main.Model = MainModel;

    Main.logout = logout;
    Main.getMyPawnShopProducts = getMyPawnShopProducts;
    Main.preloadToMyProductListUser = preloadToMyProductListUser;
    Main.preloadToMyProductListPawnShop = preloadToMyProductListPawnShop;
    Main.preloadToBidListPawnShopPending = preloadToBidListPawnShopPending;
    Main.preloadToBidListPawnShopResponded = preloadToBidListPawnShopResponded;
    Main.preloadToFavoriteProductList = preloadToFavoriteProductList;
    //====================================================
    //  Implementation
    //====================================================
    function logout(stateAfterLogout) {
      $localStorage[appName] = {
        geoJSON: {
          type: 'Point',
          coordinates: [127.02800027507125, 37.498085435791786] // default 강남역.
        },
        marketDistance: 8000,
        pawnShopDistance: 5000,
        address: '강남역',
        firstTime: false
      };
      $ionicSideMenuDelegate.toggleLeft(false);
      $state.go(stateAfterLogout);
    }

    function getMyPawnShopProducts() {
      return AppService.getMyPawnShopProducts()
        .then(function() {
          return U.goToState('main.myProductList', {
            category: 'pawnShop'
          });
        })
        .catch(U.error);
    }

    function preloadToMyProductListUser() {
      return Preload.stateWithProducts('main.myProductListUser', {
          category: 'user'
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToMyProductListPawnShop() {
      return Preload.stateWithProducts('main.myProductListPawnShop', {
          category: 'pawnShop'
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToBidListPawnShopPending() {
      return Preload.stateWithBids('main.bidListPawnShopPending', {
          category: 'pawnShop',
          status: 'pending'
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToBidListPawnShopResponded() {
      return Preload.stateWithBids('main.bidListPawnShopResponded', {
          category: 'pawnShop',
          status: 'responded'
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToFavoriteProductList() {
      return Preload.stateWithProducts('main.favoriteProductList', {

        }, true, 'forward')
        .catch(U.error);
    }
    //====================================================
    //  Modal
    //====================================================
    $ionicModal.fromTemplateUrl('state/modal/requestLogin.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      Main.requestLoginModal = modal;
    });
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('MainModel', MainModel);

  MainModel.$inject = [];

  function MainModel() {

    var model = {};

    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('WalkThroughController', WalkThroughController);

  WalkThroughController.$inject = ['$scope', 'WalkThroughModel', '$ionicSlideBoxDelegate', '$window', '$state', '$ionicGesture', 'appStorage'];

  function WalkThroughController($scope, WalkThroughModel, $ionicSlideBoxDelegate, $window, $state, $ionicGesture, appStorage) {

    var WalkThrough = this;
    WalkThrough.Model = WalkThroughModel;

    WalkThrough.leaveWalkThrough = leaveWalkThrough;
    WalkThrough.onSlideChange = onSlideChange;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.enter', onEnter);

    //====================================================
    //  Implementations
    //====================================================
    function onSlideChange($index) {
      console.log($index);
    }

    function onBeforeEnter() {
      $ionicSlideBoxDelegate.$getByHandle('walk-through-slide').update();
      $ionicSlideBoxDelegate.$getByHandle('walk-through-slide').slide(0, 0);
      $ionicSlideBoxDelegate.$getByHandle('walk-through-slide').enableSlide(true);
    }

    function onEnter() {
      var lastSlideIndex = WalkThroughModel.imagePaths.length - 1;
      var lastSlideElement = angular.element($window.document.querySelector('#slide' + lastSlideIndex));
      $ionicGesture.on('swipeleft', leaveWalkThrough, lastSlideElement);
    }

    //====================================================
    //  Helper
    //====================================================
    function leaveWalkThrough() {
      appStorage.firstTime = false;
      $state.go('main.login');
    }

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('WalkThroughModel', WalkThroughModel);

  WalkThroughModel.$inject = [];

  function WalkThroughModel() {

    var model = {
      imagePaths: [
        'img/walkthrough_01.png',
        'img/walkthrough_02.png',
        'img/walkthrough_03.png'
      ]
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('LoginController', LoginController);

  LoginController.$inject = ['$scope', 'Users', 'Places', 'LoginModel', 'Message', 'appStorage', '$state', '$q', 'Preload', 'U'];

  function LoginController($scope, Users, Places, LoginModel, Message, appStorage, $state, $q, Preload, U) {

    var Login = this;
    Login.Model = LoginModel;

    Login.login = login;
    Login.lookAround = lookAround;

    $scope.$on('$ionicView.enter', onEnter);
    //====================================================
    //  Implementation
    //====================================================

    function login() {
      Message.loading();
      return Users.login({}, {
          identifier: LoginModel.form.email,
          password: LoginModel.form.password
        }).$promise
        .then(function saveUserDataToStorage(authData) {
          appStorage.token = authData.token;
          appStorage.user = authData.user;
          return appStorage.user;
        })
        .then(function checkPlaceWith(userData) {
          return Places.getPlaces({
            owner: userData.id
          }).$promise;
        })
        .then(function createPlaceIfNoPlaces(placesWrapper) {
          if (placesWrapper.places.length === 0 && appStorage.user.role === 'pawnShop') {
            var placeData = getPlaceDataFromUser(appStorage.user);
            console.log('placeData');
            console.log(placeData);
            return $q.all([Places.createPlace({}, placeData).$promise]);
          } else {
            return placesWrapper.places;
          }
        })
        .then(function savePlaceDataToStorageThenMove(places) {
          console.log(places);
          appStorage.place = places[0] || [];
          var params = {};
          if (appStorage.user.role === 'user') {
            params.category = 'market';
          } else if (appStorage.user.role === 'pawnShop') {
            params.category = 'pawnShop';
          }
          return Preload.stateWithProducts('main.productList' + '.' + params.category,
            params, false);
        })
        .then(function() {
          var params = {};
          if (appStorage.user.role === 'user') {
            params.category = 'market';
          } else if (appStorage.user.role === 'pawnShop') {
            params.category = 'pawnShop';
          }
          return U.goToState('main.productList.' + params.category, params, 'forward');
        })
        .catch(function(err) {
          console.log('err');
          console.log(err);
          Message.hide();
          Message.alert('로그인 알림', '이메일이나 암호가 잘못 되었습니다.')
            .then(function() {
              LoginModel.form = {};
            });
        });
    }

    function lookAround() {
      if (!appStorage.user) {
        appStorage.user = {};
      }
      appStorage.user.role = 'user';
      appStorage.user.lookAround = true;

      // U.goToState('main.productList.market')
      return Preload.stateWithProducts('main.productList.market', {
          category: 'market'
        }, true, 'forward')
        .catch(U.error);
    }

    function onEnter() {
      LoginModel.form = {};
    }

    //====================================================
    //  Helper
    //====================================================
    function getPlaceDataFromUser(user) {
      var place = {};
      angular.extend(place, user);
      delete place.id;
      delete place.createdAt;
      delete place.exp;
      delete place.gravatarUrl;
      delete place.iat;
      delete place.role;
      delete place.rol;
      delete place.updatedAt;
      delete place.username;
      place.description = '업데이트 해주세요.';
      place.category = 'pawnShop';
      return place;
    }

  } //END
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('LoginModel', LoginModel);

  LoginModel.$inject = [];

  function LoginModel() {

    var model = {
      form: {
        username: null,
        email: null,
        password: null
      }
    };
    return model;

  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ResetPasswordController', ResetPasswordController);

  ResetPasswordController.$inject = ['ResetPasswordModel', 'Message', 'Users', 'U', '$scope'];

  function ResetPasswordController(ResetPasswordModel, Message, Users, U, $scope) {

    var ResetPassword = this;
    ResetPassword.Model = ResetPasswordModel;

    ResetPassword.sendForm = sendForm;

    $scope.$on('$ionicView.beforeEnter', function() {
      ResetPasswordModel.form = {};
      ResetPasswordModel.confirmPassword = null;
    });

    function sendForm() {
      console.log("---------- 'test' ----------");
      console.log('test');
      console.log("HAS TYPE: " + typeof 'test');
      console.log("---------- CONSOLE END -------------------");
      if (!validate()) {
        return false;
      }

      Users.changePassword({}, ResetPasswordModel.form).$promise
        .then(function(message) {
          return Message.alert('비밀번호변경 알림', message.message);
        })
        .then(function() {
          U.goBack();
        })
        .catch(function(err) {
          console.log(err);
          ResetPasswordModel.form = {};
          ResetPasswordModel.confirmPassword = null;
          Message.alert('비밀번호변경 알림', err.data.message);
        });
    }

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    //====================================================
    //  Helper
    //====================================================
    function validate() {
      var form = ResetPasswordModel.form;

      if (form.newPassword !== ResetPasswordModel.confirmPassword) {
        Message.alert('비민번호 변경 알림', '새 비밀번호와 재입력한 비밀번호가 다릅니다.');
        ResetPasswordModel.form = {};
        ResetPasswordModel.confirmPassword = null;
        return false;
      }
      return true;
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ResetPasswordModel', ResetPasswordModel);

  ResetPasswordModel.$inject = [];

  function ResetPasswordModel() {

    var model = {
      form: {
        oldPassword: null,
        newPassword: null
      },
      confirmPassword: null

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('SignUpController', SignUpController);

  SignUpController.$inject = [
    '$scope', 'Users', 'Places', 'SignUpModel', 'Message', 'U',
    '$state', 'daum', '$ionicScrollDelegate', 'appStorage', '$q',
    'Preload'
  ];

  function SignUpController(
    $scope, Users, Places, SignUpModel, Message, U,
    $state, daum, $ionicScrollDelegate, appStorage, $q,
    Preload
  ) {

    var SignUp = this;
    SignUp.Model = SignUpModel;

    SignUp.signUp = signUp;
    SignUp.searchPlace = searchPlace;
    SignUp.selectPlace = selectPlace;
    SignUp.checkEmail = checkEmail;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
    function checkEmail() {
      Message.loading();
      return Users.checkEmail({
          email: SignUpModel.form.email
        }).$promise
        .then(function(data) {
          if (data.isAvailable) {
            SignUpModel.checkedEmail = true;
            Message.alert('비밀번호 중복확인 알림', '사용가능한 이메일 입니다.');
          } else {
            SignUpModel.checkedEmail = false;
            Message.alert('비밀번호 중복확인 알림', '이미 사용중인 이메일 입니다.');
          }
        })
        .catch(function(err) {
          console.log(err);
          SignUpModel.checkedEmail = false;
          Message.alert('비밀번호 중복확인 알림', '이메일을 입력해주세요.');
        })
        .finally(function() {
          Message.hide();
        });
    }

    function searchPlace() {
      if (!SignUpModel.form.address) {
        return false;
      }
      var ps = new daum.maps.services.Places();
      Message.loading();
      ps.keywordSearch(SignUpModel.form.address, function(status, data) {
        // if no search result, notify and exit.
        Message.hide();
        if (data.places[0] === undefined) {
          Message.alert(
            '요청하신 장소가 없습니다',
            '다시검색해주세요'
          );
          return false;
        }
        SignUpModel.places = data.places;
        console.log(data.places);

      }, function(err) {
        console.log(err);
        Message.hide();
        Message.alert();
      });
    }

    function selectPlace(placeObj) {
      SignUpModel.form.address = placeObj.address;
      SignUpModel.form.geoJSON = {
        type: 'Point',
        coordinates: [Number(placeObj.longitude), Number(placeObj.latitude)]
      };
      SignUpModel.places = [];
      $ionicScrollDelegate.resize();
      console.log(SignUpModel.form.address);
      console.log(SignUpModel.form.geoJSON);
      console.log(typeof SignUpModel.form.geoJSON.coordinates[0]);
    }

    function signUp(category) {
      var promise;
      SignUpModel.form.username = SignUpModel.form.email;
      if (!validateForm(category)) {
        return false;
      }
      Message.loading();
      if (category === 'user') {
        SignUpModel.form.role = 'user';
        promise = Users.register({}, SignUpModel.form).$promise;
      } else if (category === 'pawnShop') {
        SignUpModel.form.role = 'pawnShop';
        promise = Users.registerPlaceOwner({}, SignUpModel.form).$promise;
      } else {
        return Message.alert('something is wrong', 'SignUp.signUp');
      }
      return promise
        .then(function(userData) {
          console.log(userData);
          Message.hide();
          return Message.alert('회원가입 성공', '회원가입을 성공하였습니다.');
        })
        .then(function(alertResponse) {
          console.log(alertResponse);
          return login(SignUpModel.form.email, SignUpModel.form.password);
        })
        .catch(function(err) {
          console.log(err);
          Message.hide();
          reset();
          return Message.alert('가입실패', '다시 입력해주세요');
        });
    }

    function onBeforeEnter() {
      reset();
    }

    //====================================================
    //  Helper
    //====================================================
    function login(identifier, password) {
      Message.loading();
      return Users.login({}, {
          identifier: identifier,
          password: password
        }).$promise
        .then(function saveUserDataToStorage(authData) {
          appStorage.token = authData.token;
          appStorage.user = authData.user;
          return appStorage.user;
        })
        .then(function checkPlaceWith(userData) {
          return Places.getPlaces({
            owner: userData.id
          }).$promise;
        })
        .then(function createPlaceIfNoPlaces(placesWrapper) {
          if (placesWrapper.places.length === 0 && appStorage.user.role === 'pawnShop') {
            var placeData = getPlaceDataFromUser(appStorage.user);
            console.log('placeData');
            console.log(placeData);
            return $q.all([Places.createPlace({}, placeData).$promise]);
          } else {
            return placesWrapper.places;
          }
        })
        .then(function savePlaceDataToStorageThenMove(places) {
          console.log(places);
          appStorage.place = places[0] || [];
          var params = {};
          if (appStorage.user.role === 'user') {
            params.category = 'market';
          } else if (appStorage.user.role === 'pawnShop') {
            params.category = 'pawnShop';
          }
          return Preload.stateWithProducts('main.productList' + '.' + params.category,
            params, false);
        })
        .then(function() {
          var params = {};
          if (appStorage.user.role === 'user') {
            params.category = 'market';
          } else if (appStorage.user.role === 'pawnShop') {
            params.category = 'pawnShop';
          }
          return U.goToState('main.productList.' + params.category, params, 'forward');
        });
    }

    function getPlaceDataFromUser(user) {
      var place = {};
      angular.extend(place, user);
      delete place.id;
      delete place.createdAt;
      delete place.exp;
      delete place.gravatarUrl;
      delete place.iat;
      delete place.role;
      delete place.rol;
      delete place.updatedAt;
      delete place.username;
      place.description = '업데이트 해주세요.';
      place.category = 'pawnShop';
      return place;
    }


    function validateForm(category) {
      var alert = Message.alert.bind(null, '가입신청 알림');
      var form = SignUpModel.form;
      if (category === 'user') {
        if (!form.nickname) {
          alert('닉네임을 입력해주세요.');
          return false;
        } else if (form.nickname.length < 4) {
          alert('닉네임은 4자 이상이여야합니다.');
          return false;
        } else if (!form.email) {
          alert('이메일을 입력해주세요.');
          return false;
        } else if (!SignUpModel.checkedEmail) {
          alert('이메일 중복확인을 해주세요.');
          return false;
        } else if (!form.password) {
          alert('비밀번호를 입력해주세요.');
          return false;
        } else if (form.password !== SignUpModel.confirmPassword) {
          alert('비밀번호가 다릅니다 다시 입력해주세요.');
          return false;
        } else {
          return true;
        }
      } else if (category === 'pawnShop') {
        if (!form.name) {
          alert('점포명을 입력해주세요.');
          return false;
        } else if (!form.email) {
          alert('이메일을 입력해주세요.');
          return false;
        } else if (!SignUpModel.checkedEmail) {
          alert('이메일 중복확인을 해주세요.');
          return false;
        } else if (!form.password) {
          alert('비밀번호를 입력해주세요.');
          return false;
        } else if (form.password !== SignUpModel.confirmPassword) {
          alert('비밀번호가 다릅니다 다시 입력해주세요.');
          return false;
        } else if (!form.cellPhone) {
          alert('핸드폰 번호를 입력해주세요.');
          return false;
        } else if (!form.phone) {
          alert('전화번호를 입력해주세요.');
          return false;
        } else if (!form.companyNumber) {
          alert('대부업등록번호를 입력해주세요.');
          return false;
        } else if (!form.address) {
          alert('주소를 입력해주세요.');
          return false;
        } else if (!form.geoJSON) {
          alert('주소를 검색하여 골라주세요.');
          return false;
        } else {
          return true;
        }
      }
    }

    function reset() {
      SignUpModel.form = {};
      SignUpModel.confirmPassword = null;
    }


  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('SignUpModel', SignUpModel);

  SignUpModel.$inject = [];

  function SignUpModel() {

    var model = {
      form: {
        nickname: null,
        email: null,
        username: null,
        password: null

      },
      confirmPassword: null,
      checkedEmail: false
    };

    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProfileController', ProfileController);

  ProfileController.$inject = [
    'U', '$scope', 'Places', 'Users', 'ProfileModel', 'Message',
    'ImageService', '$ionicSlideBoxDelegate', '$timeout',
    'appStorage', '$state', 'Preload', '$q', 'daum'
  ];

  function ProfileController(
    U, $scope, Places, Users, ProfileModel, Message,
    ImageService, $ionicSlideBoxDelegate, $timeout,
    appStorage, $state, Preload, $q, daum
  ) {

    var Profile = this;
    Profile.Model = ProfileModel;
    var noLoadingStates = ['main.resetPassword'];

    Profile.sendFormUser = sendFormUser;
    // Used to update place on ion-refresh
    Profile.getImage = getImage;
    Profile.sendFormPlace = sendFormPlace;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    //====================================================
    // Initial State
    //====================================================

    //====================================================
    //  For User : Initial State
    //====================================================
    function onBeforeEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        ProfileModel.loading = true;
      }
    }

    function onAfterEnter() {
      if (!U.areSiblingViews(noLoadingStates) && $state.params.category === 'user') {
        return findOneUser()
          .then(function(user) {
            console.log(user);
            U.bindData(user, ProfileModel, 'user');
          })
          .catch(U.error);
      } else if (!U.areSiblingViews(noLoadingStates) && $state.params.category === 'pawnShop') {
        $q.all([findOnePlaceOwner(), findOnePlace()])
          .then(function(array) {
            var placeOwner = array[0];
            var place = array[1];
            U.bindData(placeOwner, ProfileModel, 'user');
            U.bindData(place, ProfileModel, 'place');
          })
          .catch(U.error);
      }
    }

    function sendFormUser() {
      var nickname = ProfileModel.user.nickname;
      var email = ProfileModel.user.email;
      var username = ProfileModel.user.email;
      return updateUser({
          id: $state.params.id,
          nickname: nickname,
          email: email,
          username: username
        })
        .then(function(user) {
          console.log(user);
          U.bindData(user, ProfileModel, 'user');
          appStorage.user.nickname = user.nickname;
          appStorage.user.email = user.email;
          appStorage.user.username = user.username;
          Message.alert('프로필 수정 알림', '업데이트가 완료 되었습니다.');
        })
        .catch(U.error);
    }

    //====================================================
    // User: Implementation
    //====================================================
    function findOneUser(extraQuery) {
      var query = {
        id: $state.params.id,
        populates: ['roles']
      };
      angular.extend(query, extraQuery);
      return Users.findOne(query).$promise
        .then(function(user) {
          var photosPromise = Preload.photos(user, 'cloudinary200', false);
          return $q.all([user, photosPromise]);
        })
        .then(function(array) {
          var user = array[0];
          return user;
        });
    }

    function updateUser(extraQuery) {
      var query = {
        id: $state.params.id
      };
      angular.extend(query, extraQuery);
      return Users.update(query).$promise
        .then(function(user) {
          var photosPromise = Preload.photos(user, 'cloudinary600', false);
          return $q.all([user, photosPromise]);
        })
        .then(function(array) {
          var user = array[0];
          console.log(user);
          return user;
        });
    }

    //====================================================
    // Place : Initial State
    //====================================================
    function findOnePlaceOwner(extraQuery) {
      var query = {
        id: $state.params.id
      };
      angular.extend(query, extraQuery);
      return Users.findOne(query).$promise
        .then(function(placeOwner) {
          var photosPromise = Preload.photos(placeOwner, 'cloudinary600', false);
          return $q.all([placeOwner, photosPromise]);
        })
        .then(function(array) {
          var placeOwner = array[0];
          return placeOwner;
        });
    }

    function findOnePlace(extraQuery) {
      var query = {
        id: appStorage.place.id,
        populates: ['photos']
      };
      angular.extend(query, extraQuery);
      return Places.findOne(query).$promise
        .then(function(place) {
          var photosPromise = Preload.photos(place, 'cloudinary600', false);
          return $q.all([place, photosPromise]);
        })
        .then(function(array) {
          var place = array[0];
          return place;
        });
    }

    function getImage(sourceType) {
      return ImageService.get({
          from: sourceType,
          fileUris: ProfileModel.fileUris,
          dataUris: ProfileModel.dataUris
        })
        .then(function() {
          $timeout(function() {
            $ionicSlideBoxDelegate.$getByHandle('update-slide').update();
          }, 0);
        });
    }

    function updatePlaceOwner(extraQuery) {
      var query = {
        id: $state.params.id
      };
      angular.extend(query, extraQuery);
      return Users.update(query).$promise
        .then(function(user) {
          var photosPromise = Preload.photos(user, 'cloudinary600', false);
          return $q.all([user, photosPromise]);
        })
        .then(function(array) {
          var user = array[0];
          console.log(user);
          return user;
        });
    }


    function sendFormPlace() {
      delete ProfileModel.user.$promise;
      delete ProfileModel.user.$resolved;
      delete ProfileModel.user.createdAt;
      delete ProfileModel.user.gravatarUrl;
      delete ProfileModel.user.owner;
      delete ProfileModel.user.updatedAt;
      delete ProfileModel.user.geoJSON;
      ProfileModel.user.username = ProfileModel.user.email;
      var placeOwnerPromise = updatePlaceOwner(ProfileModel.user);

      var placeId = ProfileModel.place.id;
      angular.extend(ProfileModel.place, ProfileModel.user);
      ProfileModel.place.id = placeId;
      delete ProfileModel.place.$promise;
      delete ProfileModel.place.$resolved;
      delete ProfileModel.place.createdAt;
      delete ProfileModel.place.gravatarUrl;
      delete ProfileModel.place.owner;
      delete ProfileModel.place.updatedAt;
      delete ProfileModel.place.geoJSON;
      if (ProfileModel.dataUris.length > 0 || ProfileModel.place.photos.length === 0) {
        delete ProfileModel.place.photos;
      }
      var placePromise = ImageService.post({
        url: '/place',
        dataUris: ProfileModel.dataUris,
        fields: ProfileModel.place
      }, 'PUT');
      $q.all([placeOwnerPromise, placePromise])
        .then(function(array) {
          var placeOwner = array[0];
          var place = array[1].data[0];
          appStorage.place = place;
          appStorage.user = placeOwner;
          ProfileModel.user = placeOwner;
          ProfileModel.place = place;
          if (!ProfileModel.place.photos) {
            ProfileModel.place.photos = [];
          }
          ProfileModel.dataUris = [];
          ProfileModel.fileUris = [];
          return Message.alert('프로필 수정 알림', '업데이트가 완료 되었습니다.');
        })
        .catch(function(err) {
          console.log(err);
          Message.alert();
        });
    }

    //====================================================
    //  Helper
    //====================================================
    // function searchPlace() {
    //   if (!ProfileModel.form.address) {
    //     return false;
    //   }
    //   var ps = new daum.maps.services.Places();
    //   Message.loading();
    //   ps.keywordSearch(ProfileModel.form.address, function(status, data) {
    //     // if no search result, notify and exit.
    //     Message.hide();
    //     if (data.places[0] === undefined) {
    //       Message.alert(
    //         '요청하신 장소가 없습니다',
    //         '다시검색해주세요'
    //       );
    //       return false;
    //     }
    //     ProfileModel.places = data.places;
    //     console.log(data.places);

    //   }, function(err) {
    //     console.log(err);
    //     Message.hide();
    //     Message.alert();
    //   });
    // }
    // function selectPlace(placeObj) {
    //   ProfileModel.form.address = placeObj.address;
    //   ProfileModel.form.geoJSON = {
    //     type: 'Point',
    //     coordinates: [Number(placeObj.longitude), Number(placeObj.latitude)]
    //   };
    //   ProfileModel.places = [];
    //   U.resize();
    //   console.log(ProfileModel.form.address);
    //   console.log(ProfileModel.form.geoJSON);
    //   console.log(typeof ProfileModel.form.geoJSON.coordinates[0]);
    // }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProfileModel', ProfileModel);

  ProfileModel.$inject = [];

  function ProfileModel() {

    var model = {
      fileUris: [],
      dataUris: [],
      place: {
        photos: [],
        name: '착한 전당포',
        email: 'niceshop@shop.co.kr',
        password: '',
        confirmPassword: '',
        cellPhone: 1012341234,
        phone: 212345678,
        companyNumber: '2013-서울강남-0123',
        address: '서울특별시 서초구 신반포로 177 6층 203호',
        openingHours: '일요일: 5시 평일 9시',
        description: '컴퓨터(아이맥/레노버/삼성/엘지)등\n패드(갤럭시 노트패드 / 아이패드)등\n여러물품 취급합니다.'
      },
      user: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('CustomerController', CustomerController);

  CustomerController.$inject = [
    '$scope', '$state',
    'CustomerModel', 'Message', 'appStorage', 'Contacts'
  ];

  function CustomerController(
    $scope, $state,
    CustomerModel, Message, appStorage, Contacts
  ) {

    var Customer = this;
    Customer.Model = CustomerModel;

    Customer.sendForm = sendForm;

    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    //====================================================
    //  Implementation
    //====================================================
    function onAfterEnter() {
      Message.hide();
    }

    function sendForm() {
      if (!appStorage.token) {
        return Message.alert('고객센터 알림', '로그인/회원가입을 하셔야 합니다.')
          .then(function() {
            $state.go('main.login');
          });
      }
      Message.loading();
      Contacts.contactAdmin({},
        CustomerModel.form
      ).$promise
        .then(function success() {
          CustomerModel.form = {};
          Message.hide();
          Message.alert('고객문의 알림', '고객문의가 성공적으로 접수 되었습니다. 가입하신 이메일로 연락 드리겠습니다.')
            .then(function() {
              $state.go('main.productList.market');
            });
        })
        .catch(function(err) {
          console.log("---------- err ----------");
          console.log(err);
          console.log("HAS TYPE: " + typeof err);
          Message.hide();
          Message.alert('고객문의 알림', '제목과 내용은 필수 사항입니다.');

        });

    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('CustomerModel', CustomerModel);

  CustomerModel.$inject = [];

  function CustomerModel() {

    var model = {
      form: {
        email: '',
        phone: '',
        title: '',
        content: ''
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('TermDetailController', TermDetailController);

  TermDetailController.$inject = [
    '$scope', 'TermDetailModel', 'Posts', 'Message', 'U', 'Preload', '$q'
  ];

  function TermDetailController(
    $scope, TermDetailModel, Posts, Message, U, Preload, $q
  ) {
    var TermDetail = this;
    TermDetail.Model = TermDetailModel;

    TermDetail.refresh = refresh;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    // Initial Loading of a state;
    //====================================================
    function onBeforeEnter() {
      TermDetailModel.loading = true;
    }

    function onAfterEnter() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, TermDetailModel, 'post');
        })
        .catch(U.error);
    }

    function refresh() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, TermDetailModel, 'post');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }

    //====================================================
    //  Implementations
    //====================================================
    function findOne(extraQuery) {
      var query = {
        category: 'term'
      };
      angular.extend(query, extraQuery);
      return Posts.find(query).$promise
        .then(function(postsWrapper) {
          var photosPromise = Preload.photos(postsWrapper.posts, 'cloudinary200', true);
          return $q.all([postsWrapper, photosPromise]);
        })
        .then(function(array) {
          var postsWrapper = array[0];
          var post = postsWrapper.posts && postsWrapper.posts[0];
          return post;
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('TermDetailModel', TermDetailModel);

  TermDetailModel.$inject = [];

  function TermDetailModel() {

    var model = {
      post: {
        title: 'test',
        content: 'test test',
        createdAt: null,
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('HomeController', HomeController);

  HomeController.$inject = ['HomeModel'];

  function HomeController(HomeModel) {

    var Home = this;
    Home.Model = HomeModel;

    //------------------------
    //  IMPLEMENTATIONS
    //------------------------

  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('HomeModel', HomeModel);

  HomeModel.$inject = [];

  function HomeModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidDetailController', BidDetailController);

  BidDetailController.$inject = ['U', '$scope', 'Bids', 'BidDetailModel', 'Message', '$stateParams', '$ionicSlideBoxDelegate'];

  function BidDetailController(U, $scope, Bids, BidDetailModel, Message, $stateParams, $ionicSlideBoxDelegate) {

    var BidDetail = this;
    BidDetail.Model = BidDetailModel;

    // Used to update bid on ion-refresh
    BidDetail.getBid = getBid;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    //====================================================
    //  Implementation
    //====================================================
    function getBid() {
      return Bids.findById({
          id: $stateParams.id,
          populates: 'createdBy,place,product'
        }).$promise
        .then(setView)
        .catch(findByIdError);
    }
    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      console.log($stateParams.id);
      // U.reset(BidDetailModel);
      // return getBid();
    }

    function onBeforeLeave() {
      return Message.loading();
    }

    function onAfterEnter() {
      $ionicSlideBoxDelegate.update();
      $ionicSlideBoxDelegate.slide(0, 0);
      $ionicSlideBoxDelegate.enableSlide(true);
      return Message.hide();
    }
    //====================================================
    //  Helper
    //====================================================
    function setView(bid) {
      console.log(bid);
      BidDetailModel.bid = bid;
      $scope.$broadcast('scroll.refreshComplete');
      U.resize();
      return Message.hide();
    }

    function findByIdError(err) {
      console.log(err);
      $scope.$broadcast('scroll.refreshComplete');
      return Message.alert();
    }
  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidDetailModel', BidDetailModel);

  BidDetailModel.$inject = [];

  function BidDetailModel() {

    var model = {
      bid: {
        id: 'asdf',
        price: 250000,
        monthlyInterest: 1.2,
        duration: 3,
        canPickUp: true,
        createdAt: '2015.08.20',

        createdBy: {
          nickname: '닉네임'
        },
        place: {
          name: '착한전당포'
        },
        product: {
          photos: [{
            url: 'http://placehold.it/500x400'
          }, {
            url: 'http://placehold.it/500x400'
          }],
          name: '아이패등',
          brand: '애플',
          boughtAt: '2015.11.11',
          condition: '상',
        }
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidRequestController', BidRequestController);

  BidRequestController.$inject = ['U', '$scope', 'Posts', 'BidRequestModel', 'Message', '$stateParams'];

  function BidRequestController(U, $scope, Posts, BidRequestModel, Message, $stateParams) {

    var BidRequest = this;
    BidRequest.Model = BidRequestModel;

    // Used to update post on ion-refresh
    BidRequest.getPost = getPost;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    //====================================================
    //  Implementation
    //====================================================
    function getPost() {
      return Posts.findById({
          id: $stateParams.id,
          populates: 'photos'
        }).$promise
        .then(setView)
        .catch(findByIdError);
    }
    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      console.log($stateParams.id);
      U.reset(BidRequestModel);
      return getPost();
    }

    function onBeforeLeave() {
      return Message.loading();
    }

    function onAfterEnter() {
      return Message.hide();
    }
    //====================================================
    //  Helper
    //====================================================
    function setView(post) {
      console.log(post);
      BidRequestModel.post = post;
      U.resize();
      return Message.hide();
    }

    function findByIdError(err) {
      console.log(err);
      return Message.alert();
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidRequestModel', BidRequestModel);

  BidRequestModel.$inject = [];

  function BidRequestModel() {

    var model = {
      form: {

      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('BidRespondController', BidRespondController);

  BidRespondController.$inject = ['U', '$scope', 'Bids', 'BidRespondModel', 'Message', '$stateParams', '$ionicSlideBoxDelegate'];

  function BidRespondController(U, $scope, Bids, BidRespondModel, Message, $stateParams, $ionicSlideBoxDelegate) {

    var BidRespond = this;
    BidRespond.Model = BidRespondModel;

    BidRespond.getBid = getBid;
    BidRespond.respondToBid = respondToBid;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onBeforeLeave);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    //====================================================
    //  Implementation
    //====================================================
    function getBid() {
      return Bids.findById({
          id: $stateParams.id,
          populates: 'createdBy,place,product'
        }).$promise
        .then(setView)
        .catch(findByIdError);
    }

    function respondToBid() {
      var ok = validateBid();
      if (!ok) {
        return false;
      }
      BidRespondModel.form.status = 'responded';
      return Bids.updateBid({
          id: $stateParams.id,
        }, BidRespondModel.form).$promise
        .then(respondToBidSuccess)
        .catch(updateBidError);
    }
    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      console.log($stateParams.id);
      // U.reset(BidRespondModel.bid);
      // U.reset(BidRespondModel.form);
      // return getBid();
    }

    function onBeforeLeave() {
      return Message.loading();
    }

    function onAfterEnter() {
      $ionicSlideBoxDelegate.update();
      $ionicSlideBoxDelegate.slide(0, 0);
      $ionicSlideBoxDelegate.enableSlide(true);
      return Message.hide();
    }
    //====================================================
    //  Helper
    //====================================================
    function setView(bid) {
      console.log(bid);
      Message.hide();
    }

    function findByIdError(err) {
      console.log(err);
      return Message.alert();
    }

    function alert(message) {
      return Message.alert.bind(null, '견적보네기 알림')(message);
    }

    function validateBid() {
      var form = BidRespondModel.form;
      if (!form.price) {
        alert('가격을 입력해주세요.');
        return false;
      } else if (!form.monthlyInterest) {
        alert('월이율을 입력해주세요.');
        return false;
      } else if (!form.duration) {
        alert('기간을 입력해주세요.');
        return false;
      } else if (typeof form.canPickUp !== 'boolean') {
        alert('출장가능 여부를 입력해주세요.');
        return false;
      }
      return true;
    }

    function respondToBidSuccess(bid) {
      console.log(bid);
      Message.alert('견적 보네기 알림', '견적이 보네졌습니다.');
    }

    function updateBidError(err) {
      console.log(err);
      return Message.alert();
    }


  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('BidRespondModel', BidRespondModel);

  BidRespondModel.$inject = [];

  function BidRespondModel() {

    var model = {
      bid: {
        id: 'asdf',
        createdAt: '2015.08.20',
        createdBy: {
          nickname: '닉네임'
        },
        place: {
          name: '착한전당포'
        },
        product: {
          photos: [{
            url: 'http://placehold.it/500x400'
          }, {
            url: 'http://placehold.it/500x400'
          }],
          name: '아이패등',
          brand: '애플',
          boughtAt: '2015.11.11',
          condition: '상',
        }
      },
      form: {
        price: null,
        monthlyInterest: null,
        duration: null,
        canPickUp: null
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('FavoriteProductDetailController', FavoriteProductDetailController);

  FavoriteProductDetailController.$inject = ['U', '$scope', 'Products', 'FavoriteProductDetailModel', 'Message', '$stateParams', 'FavoriteService', '$state', '$ionicSlideBoxDelegate', 'LinkService', 'Preload'];

  function FavoriteProductDetailController(U, $scope, Products, FavoriteProductDetailModel, Message, $stateParams, FavoriteService, $state, $ionicSlideBoxDelegate, LinkService, Preload) {

    var FavoriteProductDetail = this;
    FavoriteProductDetail.Model = FavoriteProductDetailModel;

    // Used to update product on ion-refresh
    FavoriteProductDetail.isFavorite = FavoriteService.isFavorite;
    FavoriteProductDetail.toggleProduct = FavoriteService.toggleProduct;
    FavoriteProductDetail.call = LinkService.call;
    FavoriteProductDetail.preloadToPlaceDetail = preloadToPlaceDetail;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onLeave);
    //====================================================
    //  Implementation
    //====================================================
    function preloadToPlaceDetail() {
      console.log(FavoriteProductDetailModel.product.place);
      Preload.stateWithPlaces('main.placeDetail', {
        id: FavoriteProductDetailModel.product.place.id
      }, true, 'forward');
    }

    function onBeforeEnter() {
      U.update();
      U.resize();
    }

    function onLeave() {
      U.resetSlides();
    }

    //====================================================
    //  Helper
    //====================================================

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('FavoriteProductDetailModel', FavoriteProductDetailModel);

  FavoriteProductDetailModel.$inject = [];

  function FavoriteProductDetailModel() {

    var model = {
      product: {
        place: {},
        photos: [],
        createdBy: {}
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('FavoriteProductListController', FavoriteProductListController);

  FavoriteProductListController.$inject = ['Products', 'U', 'FavoriteProductListModel', 'appStorage', '$scope', 'Preload'];

  function FavoriteProductListController(Products, U, FavoriteProductListModel, appStorage, $scope, Preload) {

    var FavoriteProductList = this;
    FavoriteProductList.Model = FavoriteProductListModel;

    FavoriteProductList.refreshProducts = refreshProducts;
    FavoriteProductList.getOlderProducts = getOlderProducts;
    FavoriteProductList.preloadToFavoriteProductDetail = preloadToFavoriteProductDetail;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });

    function preloadToFavoriteProductDetail(product) {
      return Preload.stateWithProducts('main.favoriteProductDetail', {
          id: product.id
        }, true, 'forward')
        .catch(U.error);
    }

    function refreshProducts() {
      var favoriteIds = appStorage.favorites;
      return Products.getProducts({
          id: favoriteIds,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          FavoriteProductListModel.products = productsWrapper.products;
          FavoriteProductListModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
          U.resize();
        });
    }

    function getOlderProducts() {
      var favoriteIds = appStorage.favorites;
      return Products.getProducts({
          id: favoriteIds,
          skip: FavoriteProductListModel.products.length,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          angular.forEach(productsWrapper.products, function(product) {
            FavoriteProductListModel.products.push(product);
          });
          FavoriteProductListModel.more = productsWrapper.more;
        })
        .catch(U.error)
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
          U.resize();
        });
    }


  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('FavoriteProductListModel', FavoriteProductListModel);

  FavoriteProductListModel.$inject = [];

  function FavoriteProductListModel() {

    var model = {
      products: [],
      more: false
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProductDetailController', ProductDetailController);

  ProductDetailController.$inject = ['U', '$scope', 'Products', 'ProductDetailModel', 'Message', '$stateParams', 'FavoriteService', '$state', '$ionicSlideBoxDelegate', 'LinkService', 'Preload'];

  function ProductDetailController(U, $scope, Products, ProductDetailModel, Message, $stateParams, FavoriteService, $state, $ionicSlideBoxDelegate, LinkService, Preload) {

    var ProductDetail = this;
    ProductDetail.Model = ProductDetailModel;

    // Used to update product on ion-refresh
    ProductDetail.isFavorite = FavoriteService.isFavorite;
    ProductDetail.toggleProduct = FavoriteService.toggleProduct;
    ProductDetail.call = LinkService.call;
    ProductDetail.preloadToPlaceDetail = preloadToPlaceDetail;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.beforeLeave', onLeave);
    //====================================================
    //  Implementation
    //====================================================
    function preloadToPlaceDetail() {
      console.log(ProductDetailModel.market.product.place);
      Preload.stateWithPlaces('main.placeDetail', {
        id: ProductDetailModel.market.product.place.id
      }, true, 'forward');
    }

    function onBeforeEnter() {
      U.update();
      U.resize();
    }

    function onLeave() {
      U.resetSlides();
    }

    //====================================================
    //  Helper
    //====================================================

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProductDetailModel', ProductDetailModel);

  ProductDetailModel.$inject = [];

  function ProductDetailModel() {

    var model = {
      market: {
        product: {}
      },
      pawnShop: {
        product: {}
      },
      product: {}
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProductListController', ProductListController);

  ProductListController.$inject = ['U', '$scope', 'Products', 'ProductListModel', 'Message', '$ionicHistory', '$stateParams', '$ionicModal', '$timeout', '$state', 'AppService', 'Preload', 'Dom', 'appStorage'];

  function ProductListController(U, $scope, Products, ProductListModel, Message, $ionicHistory, $stateParams, $ionicModal, $timeout, $state, AppService, Preload, Dom, appStorage) {

    var ProductList = this;
    ProductList.Model = ProductListModel;

    ProductList.showPhotos = false;
    console.log('reinst?');

    ProductList.searchProduct = searchProduct;
    ProductList.preloadToMarket = preloadToMarket;
    ProductList.preloadToPawnShop = preloadToPawnShop;
    ProductList.refreshProducts = refreshProducts;
    ProductList.getFurtherProducts = getFurtherProducts;
    ProductList.preloadToMarketProductDetail = preloadToMarketProductDetail;
    ProductList.preloadToPawnShopProductDetail = preloadToPawnShopProductDetail;

    ProductList.getNewerProducts = getNewerProducts;
    ProductList.getOlderProducts = getOlderProducts;
    ProductList.getOlderPawnShopProducts = getOlderPawnShopProducts;
    ProductList.onlyForUser = onlyForUser;

    // APP SPECIFIC
    ProductList.goToRegisterHandler = goToRegisterHandler;

    $scope.$on('$ionicView.beforeEnter', function() {
      U.resize();
    });

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.afterLeave', onAfterLeave);
    //====================================================
    //  Implementation
    //====================================================
    function onlyForUser() {
      return Message.alert('견적요청 알림', '일반유저만 견적을 요청할수있습니다.');
    }

    function searchProduct() {
      Message.loading();
      return Products.getProductsWithin({
          category: $state.params.category,
          longitude: appStorage.geoJSON.coordinates[0],
          latitude: appStorage.geoJSON.coordinates[1],
          distance: 8000,
          filter: ProductListModel.searchWord,
          limit: 10,
          populates: ['photos', 'place']
        }).$promise
        .then(function(productsWrapper) {
          if ($state.params.category === 'market') {
            ProductListModel.market.products = productsWrapper.products;
            ProductListModel.market.more = productsWrapper.more;
          } else if ($state.params.category === 'pawnShop') {
            ProductListModel.pawnShop.products = productsWrapper.products;
            ProductListModel.pawnShop.more = productsWrapper.more;
          }
          Dom.blurById('search');
          Message.hide();
        });
    }

    function preloadToMarket() {
      ProductListModel.searchWord = null;
      return Preload.stateWithProducts('main.productList.market', {
          category: 'market'
        }, true, 'back')
        .catch(U.error);
    }

    function preloadToPawnShop() {
      ProductListModel.searchWord = null;
      return Preload.stateWithProducts('main.productList.pawnShop', {
          category: 'pawnShop'
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToMarketProductDetail(id) {
      console.log("---------- id ----------");
      console.log(id);
      console.log("HAS TYPE: " + typeof id);

      return Preload.stateWithProducts('main.productDetail.market', {
          category: 'market',
          id: id
        }, true, 'forward')
        .catch(U.error);
    }

    function preloadToPawnShopProductDetail(id) {
      return Preload.stateWithProducts('main.productDetail.pawnShop', {
          category: 'pawnShop',
          id: id
        }, true, 'forward')
        .catch(U.error);
    }

    function refreshProducts() {
      var category;
      var currentModel;
      var distance;
      var query;
      if ($state.params.category === 'pawnShop') {
        query = {
          category: 'pawnShop',
          showBid: true,
          limit: 10,
          sort: 'id DESC',
          populates: ['photos']
        };
        if (ProductListModel.searchWord) {
          query.filter = ProductListModel.searchWord;
        }
        return Products.getProducts(query).$promise
          .then(function(productsWrapper) {
            ProductListModel.pawnShop.products = productsWrapper.products;
            ProductListModel.pawnShop.more = productsWrapper.more;
          })
          .catch(function(err) {
            return U.error(err);
          })
          .finally(function() {
            $scope.$broadcast('scroll.refreshComplete');
          });
      } else if ($state.params.category === 'market') {
        distance = appStorage.marketDistance;
        category = 'market';
        currentModel = ProductListModel.market;
        query = {
          category: category,
          longitude: appStorage.geoJSON.coordinates[0],
          latitude: appStorage.geoJSON.coordinates[1],
          distance: distance,
          status: 'selling',
          limit: 10,
          populates: ['photos', 'place']
        };
        if (appStorage.address === '전체보기') {
          query.distance = 999999;
          query.sort = {
            '_id': -1
          };
        }
        if (ProductListModel.searchWord) {
          query.filter = ProductListModel.searchWord;
        }
        return Products.getProductsWithin(query).$promise
          .then(function(productsWrapper) {
            console.log(productsWrapper);
            if (productsWrapper && productsWrapper.products && productsWrapper.products.length === 0) {
              $scope.$broadcast('scroll.refreshComplete');
              return Message.alert('새로고침 알림', '주위 상품이 없습니다');
            }
            ProductListModel.market.products = productsWrapper.products;
            ProductListModel.market.more = productsWrapper.more;
            U.resize();
          })
          .catch(function(err) {
            console.log(err);
            return Message.alert();
          })
          .finally(function() {
            $scope.$broadcast('scroll.refreshComplete');
          });
      }
    }

    function getFurtherProducts() {
      var category;
      var currentModel;
      var distance;
      if ($state.params.category === 'pawnShop') {} else if ($state.params.category === 'market') {
        distance = appStorage.marketDistance;
        category = 'market';
        currentModel = ProductListModel.market;
        var query = {
          category: category,
          longitude: appStorage.geoJSON.coordinates[0],
          latitude: appStorage.geoJSON.coordinates[1],
          distance: distance,
          limit: 10,
          status: 'selling',
          skip: currentModel.products.length,
          populates: ['photos', 'place']
        };
        if (ProductListModel.searchWord) {
          query.filter = ProductListModel.searchWord;
        }
        return Products.getProductsWithin(query).$promise
          .then(function(productsWrapper) {
            angular.forEach(productsWrapper.products, function(product) {
              currentModel.products.push(product);
            });
            currentModel.more = productsWrapper.more;
            return U.resize();
          })
          .catch(function(err) {
            console.log(err);
            currentModel.more = false;
            return Message.alert();
          })
          .finally(function() {
            $scope.$broadcast('scroll.infiniteScrollComplete');
          });
      }
    }

    function getOlderPawnShopProducts() {
      var lastId = ProductListModel.pawnShop.products[ProductListModel.pawnShop.products.length - 1].id;
      var query = {
        olderThan: lastId,
        category: 'pawnShop',
        showBid: true,
        limit: 10,
        populates: ['photos']
      };
      if (ProductListModel.searchWord) {
        query.filter = ProductListModel.searchWord;
      }
      return Products.getProducts(query).$promise
        .then(function(productsWrapper) {
          console.log(productsWrapper.products);
          angular.forEach(productsWrapper.products, function(product) {
            ProductListModel.pawnShop.products.push(product);
          });
          ProductListModel.pawnShop.more = productsWrapper.more;
        })
        .catch(function(err) {
          return U.error(err);
        })
        .finally(function() {
          return U.resize();
        });
    }

    //====================================================
    //  PlaceID
    //====================================================
    function getNewerProducts() {
      Products.getProducts({
        newerThan: ProductListModel.placeId.products[0].id,
        place: ProductListModel.placeId.products[0].place.id,
        category: 'market',
        limit: 10,
        populates: ['photos']
      }).$promise
        .then(function(productsWrapper) {
          console.log(productsWrapper);
          if (productsWrapper.products && productsWrapper.products.length === 0) {
            return Message.alert('새로고침 알림', '주위 상품이 없습니다');
          }
          angular.forEach(productsWrapper.products, function(product) {
            ProductListModel.placeId.products.unshift(product);
          });
          U.resize();
        })
        .catch(function(err) {
          console.log(err);
          return Message.alert();
        })
        .finally(function() {
          $scope.$broadcast('scroll.refreshComplete');
        });
    }

    function getOlderProducts() {
      var last = ProductListModel.placeId.products.length - 1;
      Products.getProducts({
        olderThan: ProductListModel.placeId.products[last].id,
        place: ProductListModel.placeId.products[0].place.id,
        category: 'market',
        sort: 'id DESC',
        limit: 10,
        populates: ['photos']
      }).$promise
        .then(function(productsWrapper) {
          console.log(productsWrapper);
          angular.forEach(productsWrapper.products, function(product) {
            ProductListModel.placeId.products.push(product);
          });
          ProductListModel.placeId.more = productsWrapper.more;
          U.resize();
        })
        .catch(function(err) {
          U.error(err);
        })
        .finally(function() {
          $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    }
    //====================================================
    //  View state
    //====================================================
    function onBeforeEnter() {
      U.resize();
    }

    function onAfterEnter() {
      ProductList.showPhotos = true;
    }

    function onAfterLeave() {
      ProductList.showPhotos = false;
    }
    //====================================================
    //  Helper
    //====================================================



    //====================================================
    //  App specific
    //====================================================
    function goToRegisterHandler() {
      ProductList.beforeRegisterModal.hide();
      $timeout(function() {
        $state.go('main.productRegister.step1', {
          category: 'user',
          step: 1,
          method: 'create'
        });
      }, 100);
    }

    //====================================================
    //  Modal
    //====================================================
    $ionicModal.fromTemplateUrl('state/10productList/modal/beforeRegisterModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      ProductList.beforeRegisterModal = modal;
    });

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProductListModel', ProductListModel);

  ProductListModel.$inject = [];

  function ProductListModel() {

    var model = {
      market: {
        products: []
      },
      pawnShop: {
        products: []
      },
      placeId: {
        products: []
      },
      location: '',
      geoJSON: {
        type: 'Point',
        coordinates: [150, 30]
      },
      // advertisements
      advertisements: [{
        id: 0,
        photos: [{
          id: 'photo111',
          url: 'img/banner1.png'
        }],
        url: 'http://naver.com',
        viewable: true
      }, {
        id: 1,
        photos: [{
          id: 'photo111',
          url: 'img/banner2.png'
        }],
        url: 'http://google.com',
        viewable: true
      }, {
        id: 2,
        photos: [{
          id: 'photo111',
          url: 'img/banner3.png'
        }],
        url: 'http://google.com',
        viewable: true
      }],
      // products
      products: [],
      more: false
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProductRegisterController', ProductRegisterController);

  ProductRegisterController.$inject = [
    'U', '$scope', 'Products', 'ProductRegisterModel', 'Message', '$stateParams',
    '$state', '$ionicModal', '$timeout', 'ImageService', 'appStorage', 'Preload', '$q'
  ];

  function ProductRegisterController(
    U, $scope, Products, ProductRegisterModel, Message, $stateParams,
    $state, $ionicModal, $timeout, ImageService, appStorage, Preload, $q
  ) {

    var ProductRegister = this;
    ProductRegister.Model = ProductRegisterModel;

    ProductRegister.setStepOne = setStepOne;
    ProductRegister.changeLocation = changeLocation;
    ProductRegister.getImage = getImage;
    ProductRegister.sendForm = sendForm;

    //====================================================
    //  Implementation
    //====================================================
    function setStepOne() {
      console.log($state.params.category);
      if (!ProductRegisterModel.validate()) {
        return false;
      }
      console.log($state.params.category);
      ProductRegister.stepOneModal.hide();
      return $timeout(function() {
        return $state.go('main.productRegister.step2', {
          category: $state.params.category,
          step: 2,
          method: 'create'
        });
      }, 150);
    }

    function changeLocation() {
      ProductRegister.stepTwoModal.hide();
      return $timeout(function() {
        return $state.go('main.daumMap', {
          prev: 'main.productRegister.step2'
        });
      }, 150);
    }

    function getImage(length, sourceType) {
      if (validateImage(length)) {
        ImageService.get({
          from: sourceType,
          fileUris: ProductRegisterModel.fileUris,
          dataUris: ProductRegisterModel.dataUris,
        });
      }
    }

    function validateImage(length) {
      var alert = Message.alert.bind(null, '사진등록 알림');
      if (length !== 1 && !ProductRegisterModel.dataUris[length - 2]) {
        if (length === 2) {
          alert('전면사진을 먼저 등록해주세요.');
          return false;
        } else if (length === 3) {
          alert('측면사진을 먼저 등록해주세요.');
          return false;
        } else if (length === 4) {
          alert('일련번호(태그)를 먼저 등록해주세요.');
          return false;
        } else if (length === 5) {
          alert('부속품 전체를 먼저 등록해주세요.');
          return false;
        }
      }
      return true;
    }

    function validateStep2Form() {
      if (!ProductRegisterModel.dataUris[0]) {
        return false;
      }
      return true;
    }

    function sendForm() {
      if (!validateStep2Form()) {
        return Message.alert('상품등록 알림', '사진을 최소한 1개이상 등록해주셔야합니다.');
      }

      if ($state.params.category === 'user') {
        Message.loading();
        ProductRegister.stepTwoModal.hide();
        ProductRegisterModel.form.category = 'pawnShop';
        ProductRegisterModel.form.status = 'pending';
        ProductRegisterModel.form.geoJSON = appStorage.geoJSON;

        return ImageService.post({
            url: '/product/byUser',
            dataUris: ProductRegisterModel.dataUris,
            fields: ProductRegisterModel.form
          })
          .then(function(productDataWrapper) {
            console.log(productDataWrapper.data);
            if (productDataWrapper.data.numberOfBidsSent === 0) {
              return $q.reject(productDataWrapper);
            }
            return Preload.stateWithProducts('main.myProductListUser', {
              category: 'user'
            }, false);
          })
          .then(function(photos) {
            console.log(photos);
            Message.hide();
            return Message.alert('견적등록이 완료 되었습니다.', '등록된 견적은 내견적서에서 확인 하실수 있습니다.');
          })
          .then(function(alertResponse) {
            console.log(alertResponse);
            return U.goToState('main.myProductListUser', {
              category: 'user'
            });
          })
          .catch(function(err) {
            console.log(err);
            if (err.data.numberOfBidsSent === 0) {
              Message.hide();
              return Message.alert('주위에 전당포가 없습니다', '지역을 다시 설정해주십시요.')
                .then(U.goToState.bind(null, 'main.daumMap'));
            }
            Message.hide();
            return Message.alert();
          })
          .finally(function() {
            return ProductRegisterModel.reset();
          });
        // Pawnshop
      } else if ($state.params.category === 'pawnShop') {
        Message.loading();
        ProductRegisterModel.form.category = 'market';
        ProductRegisterModel.form.showBids = null;
        ProductRegisterModel.form.status = 'selling';
        ProductRegisterModel.form.place = appStorage.place.id;
        ProductRegisterModel.form.geoJSON = appStorage.place.geoJSON;

        ImageService.post({
          url: '/product',
          dataUris: ProductRegisterModel.dataUris,
          fields: ProductRegisterModel.form
        })
          .then(function(productData) {
            console.log(productData);
            return Preload.stateWithProducts('main.myProductListPawnShop', {
              category: 'pawnShop'
            }, false);
          })
          .then(function(photos) {
            console.log(photos);
            Message.hide();
            return Message.alert('상품이 성공적으로 등록되었습니다', '나의 상품목록으로 이동하겠습니다.');
          })
          .then(function(alertResponse) {
            console.log(alertResponse);
            return U.goToState('main.myProductListPawnShop', {
              category: 'pawnShop'
            });
          })
          .catch(function(err) {
            console.log(err);
            Message.hide();
            return Message.alert();
          })
          .finally(function() {
            return ProductRegisterModel.reset();
          });
      }
    }
    //====================================================
    //  Modal
    //====================================================
    $ionicModal.fromTemplateUrl('state/10productRegister/modal/stepOneModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      ProductRegister.stepOneModal = modal;
    });

    $ionicModal.fromTemplateUrl('state/10productRegister/modal/stepTwoModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      ProductRegister.stepTwoModal = modal;
    });

    $ionicModal.fromTemplateUrl('state/10productRegister/modal/completedModal.html', {
      scope: $scope,
      animation: 'mh-slide'
    }).then(function(modal) {
      ProductRegister.completedModal = modal;
    });
  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProductRegisterModel', ProductRegisterModel);

  ProductRegisterModel.$inject = ['U', 'Message', '$state'];

  function ProductRegisterModel(U, Message, $state) {

    var model = {
      // product properties
      dataUris: [],
      fileUris: [],
      form: {
        name: null,
        productCategory: null,
        brand: null,
        boughtAt: null,
        price: null,
        condition: null,
        showBid: true,
        description: null,
      },
      product: {
        photos: [],
        name: null,
        productCategory: null,
        brand: null,
        boughtAt: null,
        condition: null,
        showBid: true,
        description: null,
      },
      reset: function() {
        U.reset(this.form);
        U.reset(this.product);
        this.product.photos = [];
        this.dataUris = [];
        this.fileUris = [];
      },
      validate: function() {
        var alert = Message.alert.bind(null, '상품등록 알림');
        var form = this.form;
        if ($state.params.category === 'user') {
          if (!form.name) {
            alert('제품명을 입력해주세요.');
            return false;
          } else if (!form.productCategory) {
            alert('품목을 입력해주세요.');
            return false;
          } else if (!form.brand) {
            alert('브랜드를 일력해주세요.');
            return false;
          } else if (!form.boughtAt) {
            alert('구입시기를 입력해주세요.');
            return false;
          } else if (!form.condition) {
            alert('상태를 선택해 주세요.');
            return false;
          } else if (typeof form.showBid !== 'boolean') {
            alert('견적서 공개여부를 선택해주세요');
            return false;
          } else if (!form.description) {
            alert('특이사항을 입력해주세요.');
            return false;
          } else {
            return true;
          }
        } else if ($state.params.category === 'pawnShop') {
          if (!form.name) {
            alert('제품명을 입력해주세요.');
            return false;
          } else if (!form.productCategory) {
            alert('품목을 입력해주세요.');
            return false;
          } else if (!form.brand) {
            alert('브랜드를 일력해주세요.');
            return false;
          } else if (!form.boughtAt) {
            alert('구입시기를 입력해주세요.');
            return false;
          } else if (!form.condition) {
            alert('상태를 선택해 주세요.');
            return false;
          } else if (!form.description) {
            alert('특이사항을 입력해주세요.');
            return false;
          } else {
            return true;
          }
        }
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('ProductUpdateController', ProductUpdateController);

  ProductUpdateController.$inject = ['U', '$scope', 'Products', 'ProductUpdateModel', 'Message',
    '$state', '$ionicModal', '$timeout', 'ImageService', 'appStorage', 'Preload'
  ];

  function ProductUpdateController(U, $scope, Products, ProductUpdateModel, Message,
    $state, $ionicModal, $timeout, ImageService, appStorage, Preload
  ) {

    var ProductUpdate = this;
    ProductUpdate.Model = ProductUpdateModel;

    ProductUpdate.sendUpdate = sendUpdate;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    //====================================================
    //  Implementation
    //====================================================
    function sendUpdate() {
      Message.loading();
      ProductUpdateModel.form.geoJSON = appStorage.place.geoJSON;

      if (ProductUpdateModel.dataUris.length > 0) {
        delete ProductUpdateModel.product.photos;
      }
      delete ProductUpdateModel.product.$promise;
      delete ProductUpdateModel.product.$resolved;
      ImageService.post({
        url: '/product',
        dataUris: ProductUpdateModel.dataUris,
        fields: ProductUpdateModel.product
      }, 'PUT')
        .then(function(productData) {
          console.log(productData);
          return Preload.stateWithProducts('main.myProductListPawnShop', {
            category: 'pawnShop'
          }, false);
        })
        .then(function(photos) {
          console.log(photos);
          Message.hide();
          return Message.alert('상품이 성공적으로 수정되었습니다', '나의 상품목록으로 이동하겠습니다.');
        })
        .then(function() {
          U.goToState('main.myProductListPawnShop', {
            category: 'pawnShop'
          });
          U.reset(ProductUpdateModel.product);
          U.reset(ProductUpdateModel.dataUris);
          U.reset(ProductUpdateModel.fileUris);
        })
        .catch(function(err) {
          console.log(err);
          Message.alert();
          U.reset(ProductUpdateModel.product);
          U.reset(ProductUpdateModel.dataUris);
          U.reset(ProductUpdateModel.fileUris);
        });
    }

    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      U.resize();
    }


    //====================================================
    //  Helper
    //====================================================

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('ProductUpdateModel', ProductUpdateModel);

  ProductUpdateModel.$inject = [];

  function ProductUpdateModel() {

    var model = {
      // product properties
      dataUris: [],
      fileUris: [],
      form: {
        name: null,
        productCategory: null,
        brand: null,
        boughtAt: null,
        price: null,
        condition: null,
        showBid: true,
        description: null,
      },
      product: {
        photos: [],
        name: null,
        productCategory: null,
        brand: null,
        boughtAt: null,
        price: null,
        condition: null,
        showBid: true,
        description: null,
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PostDetailController', PostDetailController);

  PostDetailController.$inject = ['PostDetailModel'];

  function PostDetailController(PostDetailModel) {

    var PostDetail = this;
    PostDetail.Model = PostDetailModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PostDetailModel', PostDetailModel);

  PostDetailModel.$inject = [];

  function PostDetailModel() {

    var model = {
      market: {
        product: {}
      },
      pawnShop: {
        product: {}
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PostListController', PostListController);

  PostListController.$inject = ['PostListModel'];

  function PostListController(PostListModel) {

    var PostList = this;
    PostList.Model = PostListModel;


    //------------------------
    //  IMPLEMENTATIONS
    //------------------------
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PostListModel', PostListModel);

  PostListModel.$inject = [];

  function PostListModel() {

    var model = {

    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('AnnouncementDetailController', AnnouncementDetailController);

  AnnouncementDetailController.$inject = [
    '$scope', 'AnnouncementDetailModel', 'Posts', 'Message', 'U', 'Preload', '$q',
    '$state'
  ];

  function AnnouncementDetailController(
    $scope, AnnouncementDetailModel, Posts, Message, U, Preload, $q,
    $state
  ) {
    var AnnouncementDetail = this;
    AnnouncementDetail.Model = AnnouncementDetailModel;

    AnnouncementDetail.refresh = refresh;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    // Initial Loading of a state;
    //====================================================
    function onBeforeEnter() {
      AnnouncementDetailModel.loading = true;
    }

    function onAfterEnter() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, AnnouncementDetailModel, 'post');
        })
        .catch(U.error);
    }

    function refresh() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, AnnouncementDetailModel, 'post');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }

    //====================================================
    //  Implementations
    //====================================================
    function findOne(extraQuery) {
      var query = {
        id: $state.params.id
      };
      angular.extend(query, extraQuery);
      return Posts.findOne(query).$promise
        .then(function(post) {
          var photosPromise = Preload.photos(post, 'cloudinary200', false);
          return $q.all([post, photosPromise]);
        })
        .then(function(array) {
          var post = array[0];
          return post;
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AnnouncementDetailModel', AnnouncementDetailModel);

  AnnouncementDetailModel.$inject = [];

  function AnnouncementDetailModel() {

    var model = {
      post: {
        title: 'test',
        content: 'test test',
        createdAt: null,
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('AnnouncementListController', AnnouncementListController);

  AnnouncementListController.$inject = [
    '$scope', 'AnnouncementListModel', 'Posts', 'Message', 'U', 'Preload', '$q'
  ];

  function AnnouncementListController(
    $scope, AnnouncementListModel, Posts, Message, U, Preload, $q
  ) {
    var AnnouncementList = this;
    AnnouncementList.Model = AnnouncementListModel;
    var noLoadingStates = ['main.announcementDetail'];

    AnnouncementList.refresh = refresh;
    AnnouncementList.loadMore = loadMore;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    // Initial Loading of a state;
    //====================================================
    function onBeforeEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        AnnouncementListModel.loading = true;
      }
    }

    function onAfterEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        return find()
          .then(function(postsWrapper) {
            console.log(postsWrapper);
            U.bindData(postsWrapper, AnnouncementListModel, 'posts');
          })
          .catch(U.error);
      }
    }

    function refresh() {
      return find()
        .then(function(postsWrapper) {
          console.log(postsWrapper);
          U.bindData(postsWrapper, AnnouncementListModel, 'posts');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }

    function loadMore() {
      var last = AnnouncementListModel.posts.length - 1;
      return find({
          olderThan: AnnouncementListModel.posts[last]
        })
        .then(function(postsWrapper) {
          U.appendData(postsWrapper, AnnouncementListModel, 'posts');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }
    //====================================================
    //  Implementations
    //====================================================
    function find(extraQuery) {
      var query = {
        category: 'notification',
        limit: 20,
        sort: 'id DESC'
      };
      angular.extend(query, extraQuery);
      return Posts.find(query).$promise
        .then(function(postsWrapper) {
          var photosPromise = Preload.photos(postsWrapper.posts, 'cloudinary200', true);
          return $q.all([postsWrapper, photosPromise]);
        })
        .then(function(array) {
          var postsWrapper = array[0];
          return postsWrapper;
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('AnnouncementListModel', AnnouncementListModel);

  AnnouncementListModel.$inject = [];

  function AnnouncementListModel() {

    var model = {
      posts: [{
        id: 'test1',
        title: '첫번째 공지사항',
        createdAt: new Date()
      }, {
        id: 'test2',
        title: '두번째 공지사항',
        createdAt: new Date()
      }],
      more: false
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('FaqDetailController', FaqDetailController);

  FaqDetailController.$inject = [
    '$scope', 'FaqDetailModel', 'Posts', 'Message', 'U', 'Preload', '$q',
    '$state'
  ];

  function FaqDetailController(
    $scope, FaqDetailModel, Posts, Message, U, Preload, $q,
    $state
  ) {
    var FaqDetail = this;
    FaqDetail.Model = FaqDetailModel;

    FaqDetail.refresh = refresh;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    // Initial Loading of a state;
    //====================================================
    function onBeforeEnter() {
      FaqDetailModel.loading = true;
    }

    function onAfterEnter() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, FaqDetailModel, 'post');
        })
        .catch(U.error);
    }

    function refresh() {
      return findOne()
        .then(function(post) {
          console.log(post);
          U.bindData(post, FaqDetailModel, 'post');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }

    //====================================================
    //  Implementations
    //====================================================
    function findOne(extraQuery) {
      var query = {
        id: $state.params.id
      };
      angular.extend(query, extraQuery);
      return Posts.findOne(query).$promise
        .then(function(post) {
          var photosPromise = Preload.photos(post, 'cloudinary200', true);
          return $q.all([post, photosPromise]);
        })
        .then(function(array) {
          var post = array[0];
          return post;
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('FaqDetailModel', FaqDetailModel);

  FaqDetailModel.$inject = [];

  function FaqDetailModel() {

    var model = {
      post: {
        title: 'test',
        content: 'test test',
        createdAt: null,
      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('FaqListController', FaqListController);

  FaqListController.$inject = [
    '$scope', 'FaqListModel', 'Posts', 'Message', 'U', 'Preload', '$q'
  ];

  function FaqListController(
    $scope, FaqListModel, Posts, Message, U, Preload, $q
  ) {
    var FaqList = this;
    FaqList.Model = FaqListModel;
    var noLoadingStates = ['main.faqDetail'];

    FaqList.refresh = refresh;
    FaqList.loadMore = loadMore;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);

    //====================================================
    // Initial Loading of a state;
    //====================================================
    function onBeforeEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        FaqListModel.loading = true;
      }
    }

    function onAfterEnter() {
      if (!U.areSiblingViews(noLoadingStates)) {
        return find()
          .then(function(postsWrapper) {
            console.log(postsWrapper);
            U.bindData(postsWrapper, FaqListModel, 'posts');
          })
          .catch(U.error);
      }
    }

    function refresh() {
      return find()
        .then(function(postsWrapper) {
          console.log(postsWrapper);
          U.bindData(postsWrapper, FaqListModel, 'posts');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }

    function loadMore() {
      var last = FaqListModel.posts.length - 1;
      return find({
          olderThan: FaqListModel.posts[last]
        })
        .then(function(postsWrapper) {
          U.appendData(postsWrapper, FaqListModel, 'posts');
        })
        .catch(U.error)
        .finally(function() {
          U.broadcast($scope);
        });
    }
    //====================================================
    //  Implementations
    //====================================================
    function find(extraQuery) {
      var query = {
        category: 'faq',
        limit: 20,
        sort: 'id DESC'
      };
      angular.extend(query, extraQuery);
      return Posts.find(query).$promise
        .then(function(postsWrapper) {
          var photosPromise = Preload.photos(postsWrapper.posts, 'cloudinary200', true);
          return $q.all([postsWrapper, photosPromise]);
        })
        .then(function(array) {
          var postsWrapper = array[0];
          return postsWrapper;
        });
    }

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('FaqListModel', FaqListModel);

  FaqListModel.$inject = [];

  function FaqListModel() {

    var model = {
      posts: [{
        title: '첫번째 공지사항'
      }, {
        title: '두번째 공지사항'
      }],
      more: false
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PlaceDetailController', PlaceDetailController);

  PlaceDetailController.$inject = ['U', '$scope', 'Places', 'PlaceDetailModel', 'Message', '$stateParams', 'FavoriteService', 'DaumMapModel', 'Preload'];

  function PlaceDetailController(U, $scope, Places, PlaceDetailModel, Message, $stateParams, FavoriteService, DaumMapModel, Preload) {

    var PlaceDetail = this;
    PlaceDetail.Model = PlaceDetailModel;

    // Used to update place on ion-refresh
    PlaceDetail.isFavorite = FavoriteService.isFavorite;
    PlaceDetail.togglePlace = FavoriteService.togglePlace;
    PlaceDetail.pinSelectedPlace = pinSelectedPlace;
    PlaceDetail.preloadToProductListByPlace = preloadToProductListByPlace;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.leave', onLeave);
    //====================================================
    //  Implementation
    //====================================================
    function pinSelectedPlace() {
      var longitude = PlaceDetailModel.place.geoJSON.coordinates[0];
      var latitude = PlaceDetailModel.place.geoJSON.coordinates[1];
      DaumMapModel.selectedPlace.longitude = longitude;
      DaumMapModel.selectedPlace.latitude = latitude;
      U.goToState('main.daumMap', {
        id: PlaceDetailModel.place.id
      });
    }

    function preloadToProductListByPlace() {
      Preload.stateWithProducts('main.placeId', {
        id: PlaceDetailModel.place.id,
        category: 'market'
      }, true, 'forward');
    }
    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      U.update();
    }

    function onLeave() {
      U.resetSlides();
    }

    //====================================================
    //  Helper
    //====================================================

  } //end
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PlaceDetailModel', PlaceDetailModel);

  PlaceDetailModel.$inject = [];

  function PlaceDetailModel() {

    var model = {
      place: {
        name: '착한 전당포',
        photos: [],

        address: '서울특별시 강남구 역삼동 123123123 123123 123123',
        cellPhone: '01012341234',
        phone: '021231231',
        openingHours: [{
          start: '07:00',
          end: '20:00'
        }, {
          start: '07:00',
          end: '20:00'
        }, {
          start: '07:00',
          end: '20:00'
        }, {
          start: '03:00',
          end: '20:00'
        }, ],
        canPickUp: true,
        showPhone: true,
        description: '전자제품 취급합니다. \n 컴퓨터 / 패드 / 핸드폰 등 여러 전자제품 취급합니다.'

      }
    };
    return model;
  }
})();

(function() {
  'use strict';
  angular.module('app')
    .controller('PlaceListController', PlaceListController);

  PlaceListController.$inject = ['$scope', 'PlaceListModel', 'U'];

  function PlaceListController($scope, PlaceListModel, U) {

    var PlaceList = this;
    PlaceList.Model = PlaceListModel;

    PlaceList.showPhotos = false;

    $scope.$on('$ionicView.beforeEnter', onBeforeEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.afterLeave', onAfterLeave);
    //====================================================
    //  Implementation
    //====================================================

    //====================================================
    //  View states
    //====================================================
    function onBeforeEnter() {
      U.resize();
    }

    function onAfterEnter() {
      PlaceList.showPhotos = true;
    }

    function onAfterLeave() {
      PlaceList.showPhotos = false;
    }
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .factory('PlaceListModel', PlaceListModel);

  PlaceListModel.$inject = [];

  function PlaceListModel() {

    var model = {
      places: []
    };
    return model;
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .controller('DaumMapController', DaumMapController);

  DaumMapController.$inject = ['DaumMapModel', '$ionicModal', '$scope', '$state', '$stateParams', '$timeout', 'Message', 'appStorage', 'Preload'];

  function DaumMapController(DaumMapModel, $ionicModal, $scope, $state, $stateParams, $timeout, Message, appStorage, Preload) {

    var DaumMap = this;
    DaumMap.Model = DaumMapModel;

    DaumMap.searchType = "address";

    DaumMap.findMeThenSearchNearBy = DaumMapModel.findMeThenSearchNearBy;
    DaumMap.searchLocationNearBy = DaumMapModel.searchLocationNearBy;
    DaumMap.setAppStorage = setAppStorage;

    $scope.$on('$ionicView.enter', onEnter);
    $scope.$on('$ionicView.afterEnter', onAfterEnter);
    $scope.$on('$ionicView.afterLeave', onAfterLeave);

    //====================================================
    // Implementation
    //====================================================
    function setAppStorage() {
      var longitude = DaumMapModel.currentPosition.longitude;
      var latitude = DaumMapModel.currentPosition.latitude;
      appStorage.geoJSON.coordinates[0] = longitude;
      appStorage.geoJSON.coordinates[1] = latitude;
      console.log("---------- $state.params.prev ----------");
      console.log($state.params.prev);
      console.log("HAS TYPE: " + typeof $state.params.prev);

      if ($state.params.prev === 'main.productRegister.step2') {
        return $state.go('main.productRegister.step2', {
          category: 'user',
          method: 'create',
          step: 2
        });
      }
      return Preload.stateWithProducts('main.productList.market', {
        category: 'market'
      }, true, 'forward');
    }

    function onEnter() {
      // DaumMapModel.domMap.relayout();
    }

    function onAfterEnter() {
      $timeout(function() {
        DaumMapModel.domMap.relayout();
        if ($state.params.id) {
          DaumMapModel.pinSelectedPlace();
        }
      }, 10);
    }

    function onAfterLeave() {
      if ($state.params.id) {
        DaumMapModel.unPinSelectedPlace();
      }
    }

    //====================================================
    //  Modals
    //====================================================
    $ionicModal.fromTemplateUrl('state/20daumMap/placeModal.html', {
      scope: $scope,
      animation: 'slide-in-up'
    })
      .then(function(modal) {
        DaumMapModel.modal = modal;
      });
  }
})();

(function() {
  'use strict';

  angular.module('app')
    .directive('daumMap', daumMap);

  // Products or Posts
  daumMap.$inject = ['DaumMapModel', 'Places', 'Bookings', 'Products', '$state', '$cordovaGeolocation', '$geolocation', 'Message', '$q', '$stateParams', 'daum', 'appStorage'];

  function daumMap(DaumMapModel, Places, Bookings, Products, $state, $cordovaGeolocation, $geolocation, Message, $q, $stateParams, daum, appStorage) {
    return {
      scope: {
        markerSrc: '@',
        markerClickedSrc: '@',
        markerWidth: '@',
        markerHeight: '@',
      },
      compile: function(element) {
        //==========================================================================
        //              Global Map Property
        //==========================================================================
        var latitude = appStorage.geoJSON.coordinates[1] || DaumMapModel.currentPosition.latitude || 37.498085435791786;
        var longitude = appStorage.geoJSON.coordinates[0] || DaumMapModel.currentPosition.longitude || 127.02800027507125;
        var DOM = element[0];
        var mapOptions = {
          center: new daum.maps.LatLng(latitude, longitude),
          level: 4,
          draggable: true
        };
        daum.maps.disableHD();
        var map = new daum.maps.Map(DOM, mapOptions);
        var ps = new daum.maps.services.Places();
        var geocoder = new daum.maps.services.Geocoder();

        //====================================================
        //  Functions Exposed to controller via DaumMapModel
        //====================================================
        DaumMapModel.findMeThenSearchNearBy = findMeThenSearchNearBy;
        DaumMapModel.searchLocationNearBy = searchLocationNearBy;
        DaumMapModel.pinSelectedPlace = pinSelectedPlace;
        DaumMapModel.unPinSelectedPlace = unPinSelectedPlace;
        DaumMapModel.marker = null;
        DaumMapModel.placeIdMarker = null;

        //====================================================
        //  Link Function
        //====================================================
        return function link(scope) {
          // Marker style properties.
          var markerSize = new daum.maps.Size(Number(scope.markerWidth), Number(scope.markerHeight));
          var markerImg = new daum.maps.MarkerImage(scope.markerSrc, markerSize);
          map.relayout();
          DaumMapModel.domMap = map;
          daum.maps.event.addListener(map, 'click', function(mouseEvent) {
            geocoder.coord2addr(mouseEvent.latLng, function(status, result) {
              appStorage.address = result[0].fullName;
            });
            if (DaumMapModel.marker) {
              DaumMapModel.marker.setMap(null);
            }
            DaumMapModel.marker = new daum.maps.Marker({
              position: mouseEvent.latLng,
              image: markerImg
            });
            DaumMapModel.marker.setMap(map);
            DaumMapModel.marker.setDraggable(true);
            DaumMapModel.currentPosition = {
              latitude: mouseEvent.latLng.getLat(),
              longitude: mouseEvent.latLng.getLng()
            };
          });
        }; // link end

        //====================================================
        //  Helper
        //====================================================
        function findMeThenSearchNearBy() {
          Message.loading();
          $cordovaGeolocation.getCurrentPosition({
            maximumAge: 10000,
            timeout: 6000
          })
            .then(function success(position) {
              Message.hide();
              if (position.coords == null) {
                Message.alert(
                  '위치 공유가 꺼져있습니다.',
                  '위치 공유를 켜주세요.'
                );
                return false;
              }
              DaumMapModel.currentPosition = {
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
              };
              map.setCenter(new daum.maps.LatLng(
                DaumMapModel.currentPosition.latitude,
                DaumMapModel.currentPosition.longitude
              ));
              console.log("---------- DaumMapModel.currentPosition ----------");
              console.log(DaumMapModel.currentPosition);
              console.log("HAS TYPE: " + typeof DaumMapModel.currentPosition);
              console.log("---------- CONSOLE END -------------------");
            })
            .catch(function error(err) {
              console.log(err);
              return Message.alert(
                '위치 공유가 꺼져있습니다.',
                '위치 공유를 켜주세요.'
              );
            })
            .finally(function() {
              return Message.hide();
            });
        }

        function searchLocationNearBy(value) {
          Message.loading();
          if (!value) {
            Message.hide();
            Message.alert('검색하기 알림', '장소 값을 넣어서 다시 검색해주세요');
            return false;
          }
          ps.keywordSearch(value, function success(status, data) {
            if (data.places[0] === undefined) {
              Message.hide();
              Message.alert(
                '요청하신 장소가 없습니다',
                '다시검색해주세요'
              );
              return false;
            }
            map.panTo(new daum.maps.LatLng(
              data.places[0].latitude,
              data.places[0].longitude
            ));
            DaumMapModel.currentPosition = {
              latitude: data.places[0].latitude,
              longitude: data.places[0].longitude
            };
            Message.hide();
          }, function erro(err) {
            console.log(err);
            Message.hide();
            Message.alert({
              title: '위치 공유가 꺼져있습니다.',
              template: '위치 공유 켜주세요.'
            });
          });
        }


        function pinSelectedPlace() {
          var longitude = DaumMapModel.selectedPlace.longitude;
          var latitude = DaumMapModel.selectedPlace.latitude;
          DaumMapModel.placeIdMarker = new daum.maps.Marker({
            position: new daum.maps.LatLng(latitude, longitude)
          });
          DaumMapModel.placeIdMarker.setMap(map);
          map.panTo(new daum.maps.LatLng(latitude, longitude));
        }

        function unPinSelectedPlace() {
          DaumMapModel.placeIdMarker.setMap(null);
        }






        //====================================================
        //  IMPLEMENTATIONS COMPILE
        //====================================================
        // Draw Markers after query
        // var drawMarkers = function(currentCenter, markerImg, markerClickedImg, scope) {
        //   resetMarkers();
        //   requestPlacesWithin(currentCenter)
        //     .then(processPin.bind(null, markerImg, markerClickedImg, scope))
        //     .catch(function error(err) {
        //       Message.hide();
        //       Message.alert();
        //       console.log(err);
        //     });
        // };
        //====================================================
        //  HELPER
        //====================================================
        // function resetMarkers() {
        //   angular.forEach(DaumMapModel.markers, function(marker) {
        //     marker.setMap(null);
        //   });
        //   DaumMapModel.markers = [];
        // }

        // function requestPlacesWithin(currentCenter) {
        //   // Request server for places;
        //   var PlacesPromise = {};
        //   if ($stateParams.id) {
        //     PlacesPromise = Products.findById({
        //       id: $stateParams.id,
        //       populates: 'photos'
        //     }).$promise;
        //   } else {
        //     PlacesPromise = Products.getProductWithin({
        //       type: 'local',
        //       latitude: currentCenter.latitude,
        //       longitude: currentCenter.longitude,
        //       distance: currentCenter.distance || 5000,
        //       limit: currentCenter.limit || 50,
        //     }).$promise;
        //   }
        //   return PlacesPromise;
        // }

        // function processPin(markerImg, markerClickedImg, scope, placesWrapper) {
        //   if ($stateParams.id) {
        //     DaumMapModel.places = [placesWrapper];
        //   } else {
        //     DaumMapModel.places = placesWrapper.products;
        //   }
        //   angular.forEach(DaumMapModel.places, function(place, i) {
        //     //place = {location:{type:'Point', coordinates:[126.10101, 27.101010]}, ...}
        //     var placeLongitude = place.geoJSON.coordinates[0];
        //     var placeLatitude = place.geoJSON.coordinates[1];
        //     // set marker
        //     var position = new daum.maps.LatLng(placeLatitude, placeLongitude);
        //     var marker = new daum.maps.Marker({
        //       map: map,
        //       position: position,
        //       // used as to link to place info
        //       title: String(i),
        //       image: markerImg,
        //       clickable: true
        //     });
        //     daum.maps.event.addListener(marker, 'click', function() {
        //       var marker = this;
        //       scope.$apply(function() {
        //         // on click: differentiate clicked image;
        //         angular.forEach(DaumMapModel.markers, function(otherMarker) {
        //           otherMarker.setImage(markerImg);
        //         });
        //         marker.setImage(markerClickedImg);
        //         // on click: show modal which will be filled with place info
        //         // modal references DaumMapModel.selectedPlace to fill in the info
        //         var index = Number(marker.getTitle());
        //         Message.loading();
        //         Products.findById({
        //           id: DaumMapModel.places[index].id,
        //           populates: 'photos,createdBy'
        //         }).$promise
        //           .then(function success(data) {
        //             Message.hide();
        //             DaumMapModel.selectedPlace = data;
        //             console.log(data);
        //             DaumMapModel.modal.show();
        //           }, function error(err) {
        //             console.log(err);
        //             Message.hide();
        //             Message.alert();
        //           });
        //         // DaumMapModel.selectedPlace = DaumMapModel.places[index];
        //       });
        //     });
        //     // Save converted place with click event added.
        //     DaumMapModel.markers.push(marker);
        //   });
        //   Message.hide();
        // }





      } // compile end
    }; //  returning an object end

  } // factory function end
})();

(function() {
  'use strict';
  angular.module('app')
    .factory('DaumMapModel', DaumMapModel);

  function DaumMapModel() {
    var model = {
      currentPosition: {
        latitude: 37.498085435791786,
        longitude: 127.02800027507125
      },
      markers: [],
      places: [],
      selectedPlace: {},
      modal: {},
      findMeThenSearchNearBy: function() {},
      searchLocationNearBy: function() {},
      pinSelectedPlace: function() {},
      unPinSelectedPlace: function() {}
    };

    return model;
  }
})();
